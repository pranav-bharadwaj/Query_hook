[{"C:\\Users\\Pranav\\query_hook\\client-side\\src\\index.js":"1","C:\\Users\\Pranav\\query_hook\\client-side\\src\\App.js":"2","C:\\Users\\Pranav\\query_hook\\client-side\\src\\reportWebVitals.js":"3","C:\\Users\\Pranav\\query_hook\\client-side\\src\\components\\Home.js":"4","C:\\Users\\Pranav\\query_hook\\client-side\\src\\components\\Login.js":"5","C:\\Users\\Pranav\\query_hook\\client-side\\src\\components\\Signup.js":"6","C:\\Users\\Pranav\\query_hook\\client-side\\src\\components\\ResetPass.js":"7","C:\\Users\\Pranav\\query_hook\\client-side\\src\\components\\Forgot.js":"8","C:\\Users\\Pranav\\query_hook\\client-side\\src\\components\\Navbar.js":"9","C:\\Users\\Pranav\\query_hook\\client-side\\src\\components\\Cover.js":"10","C:\\Users\\Pranav\\query_hook\\client-side\\src\\components\\Sidenav.js":"11","C:\\Users\\Pranav\\query_hook\\client-side\\src\\components\\HomeDataContainer.js":"12","C:\\Users\\Pranav\\query_hook\\client-side\\src\\components\\ContentParent.js":"13","C:\\Users\\Pranav\\query_hook\\client-side\\src\\components\\RightSideNav.js":"14","C:\\Users\\Pranav\\query_hook\\client-side\\src\\components\\HomeRecentQuestion.jsx":"15","C:\\Users\\Pranav\\query_hook\\client-side\\src\\components\\QustionAskModel.jsx":"16","C:\\Users\\Pranav\\query_hook\\client-side\\src\\components\\ContextApi.js":"17","C:\\Users\\Pranav\\query_hook\\client-side\\src\\components\\RegisterDetails.js":"18","C:\\Users\\Pranav\\query_hook\\client-side\\src\\components\\viewPost.jsx":"19","C:\\Users\\Pranav\\query_hook\\client-side\\src\\components\\ViewPost.jsx":"20","C:\\Users\\Pranav\\query_hook\\client-side\\src\\components\\AlertBar.jsx":"21","C:\\Users\\Pranav\\query_hook\\client-side\\src\\components\\ViewPostComponent.jsx":"22","C:\\Users\\Pranav\\query_hook\\client-side\\src\\components\\ViewPostAnswer.jsx":"23","C:\\Users\\Pranav\\query_hook\\client-side\\src\\components\\MostViewed.jsx":"24","C:\\Users\\Pranav\\query_hook\\client-side\\src\\components\\Questions.jsx":"25","C:\\Users\\Pranav\\query_hook\\client-side\\src\\components\\Admin.jsx":"26","C:\\Users\\Pranav\\query_hook\\client-side\\src\\components\\AdminLogin.jsx":"27"},{"size":480,"mtime":1608578594473,"results":"28","hashOfConfig":"29"},{"size":1638,"mtime":1611977519597,"results":"30","hashOfConfig":"29"},{"size":362,"mtime":499162500000,"results":"31","hashOfConfig":"29"},{"size":471,"mtime":1609601448595,"results":"32","hashOfConfig":"29"},{"size":6285,"mtime":1611398309566,"results":"33","hashOfConfig":"29"},{"size":15032,"mtime":1611939108544,"results":"34","hashOfConfig":"29"},{"size":5952,"mtime":1609169382117,"results":"35","hashOfConfig":"29"},{"size":3371,"mtime":1609174272046,"results":"36","hashOfConfig":"29"},{"size":5268,"mtime":1612094620511,"results":"37","hashOfConfig":"29"},{"size":2246,"mtime":1609494585508,"results":"38","hashOfConfig":"29"},{"size":1719,"mtime":1610452101416,"results":"39","hashOfConfig":"29"},{"size":1933,"mtime":1612113169339,"results":"40","hashOfConfig":"29"},{"size":2554,"mtime":1610451691408,"results":"41","hashOfConfig":"29"},{"size":6507,"mtime":1612163143521,"results":"42","hashOfConfig":"29"},{"size":8075,"mtime":1612103827891,"results":"43","hashOfConfig":"29"},{"size":16337,"mtime":1611737314759,"results":"44","hashOfConfig":"29"},{"size":91,"mtime":1609597846401,"results":"45","hashOfConfig":"29"},{"size":9118,"mtime":1610317943895,"results":"46","hashOfConfig":"29"},{"size":512,"mtime":1609921333422,"results":"47","hashOfConfig":"29"},{"size":11215,"mtime":1612124734164,"results":"48","hashOfConfig":"29"},{"size":1122,"mtime":1609924361204,"results":"49","hashOfConfig":"29"},{"size":8166,"mtime":1612124132438,"results":"50","hashOfConfig":"29"},{"size":17994,"mtime":1612127181475,"results":"51","hashOfConfig":"29"},{"size":8086,"mtime":1612087770960,"results":"52","hashOfConfig":"29"},{"size":290,"mtime":1610451969869,"results":"53","hashOfConfig":"29"},{"size":23332,"mtime":1612163317653,"results":"54","hashOfConfig":"29"},{"size":5905,"mtime":1611978300796,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"1c4sblu",{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"58"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"58"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"58"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"58"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"58"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"58"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"58"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"58"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"58"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"58"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"58"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"58"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"58"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"58"},{"filePath":"107","messages":"108","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"109","messages":"110","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"58"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"58"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"58"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"58"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"124"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"58"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"58"},"C:\\Users\\Pranav\\query_hook\\client-side\\src\\index.js",[],["133","134"],"C:\\Users\\Pranav\\query_hook\\client-side\\src\\App.js",[],"C:\\Users\\Pranav\\query_hook\\client-side\\src\\reportWebVitals.js",[],"C:\\Users\\Pranav\\query_hook\\client-side\\src\\components\\Home.js",["135","136","137"],"import React,{useContext} from 'react'\r\nimport '../componentcss/Home.css'\r\nimport Navbar from '../components/Navbar'\r\nimport CoverImg from '../components/Cover'\r\nimport HomeDataContainer from '../components/HomeDataContainer'\r\nimport Sidenav from './Sidenav'\r\nimport Authapi from './ContextApi'\r\nfunction Home() {\r\n\r\n    return (\r\n        <div>\r\n        <Navbar /> \r\n         <CoverImg />\r\n        <HomeDataContainer /> \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home\r\n","C:\\Users\\Pranav\\query_hook\\client-side\\src\\components\\Login.js",["138"],"import React,{useState,useContext} from 'react'\r\nimport logo from '../images/login_main.png'\r\nimport '../componentcss/Login.css';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport { Fade } from '@material-ui/core';\r\nimport Authapi from './ContextApi';\r\nimport Cookies from 'js-cookie';\r\nimport {Redirect} from 'react-router-dom'\r\nfunction Copyright() {\r\n    return (\r\n      <Typography variant=\"body3\" color=\"textSecondary\" align=\"center\">\r\n        {'Copyright © '}\r\n        <Link color=\"inherit\" href=\"https://material-ui.com/\">\r\n          Query hook\r\n        </Link>\r\n        {new Date().getFullYear()}\r\n        \r\n      </Typography>\r\n    );\r\n  }\r\n  \r\n  const useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n      marginTop: theme.spacing(8),\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      alignItems: 'center',\r\n    },\r\n    avatar: {\r\n      margin: theme.spacing(2),\r\n      backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n      width: '100%', // Fix IE 11 issue.\r\n      marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n      margin: theme.spacing(3, 0, 2),\r\n    },\r\n   \r\n  }));\r\n  function Alert(props) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n  }\r\nfunction Login() {\r\n    const classes = useStyles();\r\n    const Auth = useContext(Authapi)\r\n    const [open, setOpen] = useState(false);\r\n    const [statement,setStatement] = useState('')\r\n    const [condition,setCondition] = useState('')\r\n    const [email,setEmail] = useState(\"\")\r\n    const [password,setPassword] = useState(\"\")\r\n    const [remember,setRemember] = useState(false)\r\n    const data  = {email:email,password:password,remember:remember}\r\n    const handleClose = (event, reason) => {\r\n      if (reason === 'clickaway') {\r\n        return;\r\n      }\r\n  \r\n      setOpen(false);\r\n    };\r\n    function submit(e){\r\n      e.preventDefault()\r\n      \r\n      fetch('/login',{\r\n        mode:'no-cors',\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Accept': 'application/json'\r\n        },\r\n        body:JSON.stringify(data)\r\n      }).then(async res => res.json()).then(data => {\r\n        const {success,msg,id} = data\r\n        console.log(data)\r\n        if(success===200){\r\n          setCondition('success')\r\n          setStatement(msg)\r\n          setOpen(true)\r\n          Auth.setAuth(true)\r\n          console.log(Auth.Auth)\r\n          Cookies.set('id',id)\r\n          console.log(id)\r\n         \r\n        }\r\n        else{\r\n          setCondition('error')\r\n          setStatement(msg)\r\n          setOpen(true)\r\n          setTimeout(()=>{\r\n            window.location.reload()\r\n          },5000)\r\n        }\r\n      })\r\n     \r\n    }\r\n    return (\r\n      <Authapi.Consumer>\r\n        {\r\n          ({Auth}) =>{\r\n            if(Auth){\r\n              return <Redirect to  = '/'></Redirect>\r\n            }\r\n            else{\r\n              return <>\r\n              <Container component=\"main\" maxWidth=\"xs\">\r\n        <CssBaseline />\r\n        <div className={classes.paper}>\r\n        <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}  key={Fade}    anchorOrigin={{\r\n          vertical: 'top',\r\n          horizontal: 'right',\r\n        }}>\r\n        <Alert onClose={handleClose} id = \"alertgreen\" severity = {condition} >\r\n       {statement}\r\n          </Alert>\r\n       \r\n      </Snackbar>\r\n          <Avatar className={classes.avatar}>\r\n            <img src = {logo} width = \"50px\" height  = \"50px\"></img>\r\n          </Avatar>\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            Sign in to Query hook\r\n          </Typography>\r\n          <form className={classes.form} noValidate>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              id=\"email\"\r\n              label=\"Email Address\"\r\n              name=\"email\"\r\n              onChange = {(e)=>setEmail(e.target.value)}\r\n              autoFocus\r\n            />\r\n            <TextField\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              name=\"password\"\r\n              label=\"Password\"\r\n              type=\"password\"\r\n              id=\"password\"\r\n              autoComplete=\"current-password\"\r\n              onChange = {(e)=>setPassword(e.target.value)}\r\n            />\r\n            <FormControlLabel  className = \"remember\" \r\n              control={<Checkbox value=\"remember\" color=\"primary\" onChange = {(e)=>{\r\n                setRemember(e.target.checked)\r\n              }}/>}\r\n              label=\"Remember me\"\r\n            />\r\n            <Button\r\n              type=\"submit\"\r\n              fullWidth\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={classes.submit}\r\n              onClick = {submit}\r\n            >\r\n              Sign In\r\n            </Button>\r\n            <Grid container>\r\n              <Grid item xs>\r\n                <Link href=\"/forgot\" variant=\"body2\">\r\n                  Forgot password?\r\n                </Link>\r\n              </Grid>\r\n              <Grid item>\r\n                <Link href=\"/signup\" variant=\"body2\">\r\n                  {\"Need an account? Sign Up\"}\r\n                </Link>\r\n              </Grid>\r\n            </Grid>\r\n          </form>\r\n        </div>\r\n        <Box mt={8} ml = {15}>\r\n          <Copyright />\r\n        </Box>\r\n      </Container>\r\n   \r\n              </>\r\n            }\r\n          \r\n        }}\r\n      </Authapi.Consumer>\r\n      \r\n    );\r\n    \r\n}\r\n\r\nexport default Login\r\n","C:\\Users\\Pranav\\query_hook\\client-side\\src\\components\\Signup.js",["139","140","141","142"],"import React from 'react';\r\nimport {useState} from 'react'\r\nimport logo from '../images/login_main.png'\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport RegisterDetails from '../components/RegisterDetails'\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport Input from '@material-ui/core/Input'\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { makeStyles, useTheme }  from '@material-ui/core/styles'\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport Chip from '@material-ui/core/Chip';\r\nimport Select from '@material-ui/core/Select';\r\nimport PhotoCamera from '@material-ui/icons/PhotoCamera';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\n\r\nimport { Fade } from '@material-ui/core';\r\nfunction Copyright() {\r\n  return (\r\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n      {'Copyright © '}\r\n      <Link color=\"inherit\" href=\"/\">\r\n        Query hook\r\n      </Link>{' '}\r\n      {new Date().getFullYear()}\r\n      {'.'}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nfunction getStyles(name, personName, theme) {\r\n  return {\r\n    fontWeight:\r\n      personName.indexOf(name) === -1\r\n        ? theme.typography.fontWeightRegular\r\n        : theme.typography.fontWeightMedium,\r\n  };\r\n}\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 1;\r\nconst MenuProps = {\r\nPaperProps: {\r\n  style: {\r\n    maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n    width: 250,\r\n  },\r\n},\r\n};\r\nconst names = [\r\n  'A.NET',\r\n  'ALGOL ',\r\n  'Arc',\r\n  'AppleScript',\r\n  'Apex',\r\n  'Javascript',\r\n  'php',\r\n  'Node js',\r\n  'web development',\r\n  'Android',\r\n  'App development',\r\n  ''\r\n];\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\ndiv:{\r\n    borderRadius:'5px',\r\n},\r\nformControl: {\r\n    marginTop: theme.spacing(0),\r\n    minWidth: 200\r\n  \r\n  },\r\n  root:{\r\n      minWidth:'25rem',\r\n    \r\n  },avatar: {\r\n    margin: theme.spacing(0),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  \r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n}));\r\n//alet fills\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n function Signup() {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [open, setOpen] = useState(false);\r\n  const [openDetails, setOpenDetails] = React.useState(false);\r\n  const [statement,setStatement] = useState('')\r\n  const [condition,setCondition] = useState('')\r\n  let[firstName,setFirstName] = useState(\"\")\r\n  let[lastName,setLastName] = useState(\"\")\r\n  let[email,setEmail] = useState(\"\")\r\n  let[password,setPassword] = useState(\"\")\r\n  let[remember,setRemember] = useState(false)\r\n  const [currentWorking,setCurrentWorking] =  React.useState('');\r\n  const [quote,seQuote] =  React.useState('');\r\n  const [openAlert,setAlert] =  React.useState(false);\r\n  const [file,setFile] =  React.useState(\"\")\r\n  const [nameFile,setNameFile] = React.useState([])\r\n  const [tags, setTags] = React.useState([]);\r\n  const handleClose = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n\r\n    setOpen(false);\r\n  };\r\n  const handleChangeTags = (event) => {\r\n    setTags(event.target.value);\r\n  };\r\n//state to change value of alert message\r\n  \r\n  function handleRegister(e) {\r\n    e.preventDefault()\r\n   const data = {firstName,lastName,email,password,remember}\r\n   console.log(data)\r\n   if(firstName && lastName && email && password !==\"\"){\r\n    fetch('/checkUser',{\r\n      mode:'no-cors',\r\n      method: 'POST',\r\n      headers: {\r\n          'Content-Type': 'application/json',\r\n          'Accept': 'application/json'\r\n      },\r\n      body:JSON.stringify(data)\r\n    }).then(res => res.json()).then(data =>{ console.log(data.success)\r\n      console.log(data.success)\r\n      if(data.success ===200){\r\n      setOpenDetails(true)\r\n      setStatement('Yeah! welcome to our forum please provide below details')\r\n      setCondition('success')\r\n    setOpen(true);\r\n      }\r\n      else if(data.success === 400){\r\n        setStatement(\"Email already registered\")\r\n        setCondition('error')\r\n        setOpen(true)\r\n        setTimeout(()=>{\r\n          window.location.reload()\r\n        },3000)\r\n      }\r\n      else{\r\n        setStatement(\"something went wrong..!\")\r\n        setCondition('error')\r\n        setOpen(true)\r\n        setTimeout(()=>{\r\n          window.location.reload()\r\n        },2000)\r\n      }\r\n      \r\n    }).catch(err => {\r\n      setStatement(\"something went wrong\")\r\n        setCondition('error')\r\n        setOpen(true)\r\n        setTimeout(()=>{\r\n          window.location.reload()\r\n        },2000)\r\n    })\r\n  }\r\n  else{\r\n    setOpen(true)\r\n    setCondition(\"info\")\r\n    setStatement(\"Required fields can't be empty\")\r\n  }\r\n   \r\n  }\r\n  //hadling full update and register user\r\n  const handleUpdateProfile = (event) =>{\r\n    event.preventDefault()\r\n    const data = {firstName,lastName,email,password,remember, currentWorking,tags,file,quote }\r\n    if(currentWorking && tags && quote !==\"\"){\r\n    fetch('/signup',{\r\n     method:'POST',\r\n     mode:'no-cors',\r\n     headers:{\r\n       'Content-type':'multipart/form-data',\r\n       'Access-Control-Allow-Origin': '*',\r\n       'Accept':'application/json'\r\n     },\r\n     body:JSON.stringify(data)\r\n    }).then(res => res.json()).then(response =>{\r\n      if(response.success ==200){\r\n        setStatement('Successfully registered check email to activate!')\r\n        setCondition('success')\r\n      setOpen(true);\r\n      setOpenDetails(false)\r\n      }\r\n      else{\r\n        setStatement('Already updated your profile')\r\n        setCondition('error')\r\n      setOpen(true);\r\n      setOpenDetails(false)\r\n      }\r\n    })\r\n  }\r\n  else{\r\n    setAlert(true)\r\n    setCondition(\"error\")\r\n    setStatement(\"Required fields can't be empty\")\r\n  }\r\n  }\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n      \r\n      <div className={classes.paper}>\r\n      <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}  key={Fade}    anchorOrigin={{\r\n          vertical: 'top',\r\n          horizontal: 'right',\r\n        }}>\r\n        <Alert onClose={handleClose} id = \"alertgreen\" severity = {condition} >\r\n       {statement}\r\n          </Alert>\r\n       \r\n      </Snackbar>\r\n        <Avatar className={classes.avatar}>\r\n        <img src = {logo} width = \"50px\" height  = \"50px\" alt = \"Logo\"></img>\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          Sign up\r\n        </Typography>\r\n        <form className={classes.form} >\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                autoComplete=\"fname\"\r\n                name=\"firstName\"\r\n                variant=\"filled\"\r\n                required\r\n                fullWidth\r\n                id=\"firstName\"\r\n                label=\"First Name\"\r\n                autoFocus\r\n                onChange = {(e) => setFirstName(e.target.value)}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                variant=\"filled\"\r\n                required\r\n                fullWidth\r\n                id=\"lastName\"\r\n                label=\"Last Name\"\r\n                name=\"lastName\"\r\n                autoComplete=\"lname\"\r\n                onChange = {(e)=>{ setLastName(e.target.value)}}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                id=\"email\"\r\n                label=\"Email Address\"\r\n                name=\"email\"\r\n                autoComplete=\"email\"\r\n                onChange = {(e)=>{ setEmail(e.target.value)}}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                name=\"password\"\r\n                label=\"Password\"\r\n                type=\"password\"\r\n                id=\"password\"\r\n                autoComplete=\"current-password\"\r\n                onChange = {(e)=>{ setPassword(e.target.value)}}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <FormControlLabel style = {{display:'flex'}}\r\n                control={<Checkbox value=\"allowExtraEmails\" color=\"primary\" onChange = {(e)=>{ setRemember(e.target.checked)}} />}\r\n                label=\"I want to receive updates via email.\"\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Button\r\n            type=\"submit\"\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.submit}\r\n            onClick = {handleRegister}\r\n          >\r\n            Sign Up\r\n          </Button>\r\n          <Grid container justify=\"flex-end\">\r\n            <Grid item>\r\n              <Link href=\"/Login\" variant=\"body2\">\r\n                Already have an account? Sign in\r\n              </Link>\r\n            </Grid>\r\n          </Grid>\r\n        </form>\r\n      </div>\r\n      <Box mt={5}>\r\n        <Copyright />\r\n      </Box>\r\n      <Dialog\r\n        open={openDetails}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n       \r\n      >\r\n      <DialogContent>\r\n      <Container component=\"main\" maxWidth=\"lg\" >\r\n        <CssBaseline />\r\n        <div  className = {classes.root}>\r\n        {/* <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}  key={Fade}    anchorOrigin={{\r\n          vertical: 'top',\r\n          horizontal: 'right',\r\n        }}>\r\n        <Alert onClose={handleClose} id = \"alertgreen\" severity = {condition} >\r\n       'hello'\r\n          </Alert>\r\n       \r\n      </Snackbar> */}\r\n          \r\n          <Typography component=\"h3\" variant=\"h5\" >\r\n            Provide Your details\r\n          </Typography>\r\n          <FormHelperText>People let know about you </FormHelperText>\r\n\r\n          <form className={classes.form} noValidate enctype=\"multipart/form-data\" >\r\n            <TextField\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              label=\"Your current working\"\r\n              name=\"text\"\r\n              autoFocus\r\n              onChange = {(e)=> setCurrentWorking(e.target.value)}\r\n            /><FormHelperText>*Enter your current working in which field</FormHelperText>\r\n<FormControl className={classes.formControl} varient = 'filled' >\r\n                        <InputLabel id=\"demo-simple-select-filled-label\">Choose related tags </InputLabel>\r\n                            <Select\r\n                                labelId=\"demo-mutiple-chip-label\"\r\n                                id=\"demo-mutiple-chip\"\r\n                                multiple\r\n                                value={tags}\r\n                                 onChange={handleChangeTags}\r\n                                input={<Input id=\"select-multiple-chip\" />}\r\n                                renderValue={(selected) => (\r\n                                    <div className={classes.chips}>\r\n                                    {selected.map((value) => (\r\n                                        <Chip key={value} label={value} className={classes.chip} />\r\n                                    ))}\r\n                                    </div>\r\n                                )}\r\n                                MenuProps={MenuProps}\r\n                                >\r\n                                {names.map((name) => (\r\n                                    <MenuItem key={name} value={name} style={getStyles(name, tags, theme)}>\r\n                                    {name}\r\n                                    </MenuItem>\r\n                            ))}\r\n                                </Select>\r\n                        </FormControl>\r\n                        <FormHelperText>*choose your prefered technology</FormHelperText>\r\n                        <Grid item xs={9}>\r\n                        <input accept=\"image/*\" className={classes.input} id=\"icon-button-file\" type=\"file\" style = {{display:'none'}} onChange ={(e) => {setNameFile(e.target.value); setFile(\"#\" + ((1<<24)*Math.random() | 0).toString(16))}} name = \"profile\"/>\r\n                    <label htmlFor=\"icon-button-file\">\r\n                        <IconButton color=\"primary\" aria-label=\"upload picture\" component=\"span\">\r\n                        <PhotoCamera />\r\n                        </IconButton>\r\n                        <span>{nameFile}</span>\r\n                        <FormHelperText>*Upload your profile people let you know</FormHelperText>\r\n                    </label>\r\n                            </Grid>\r\n                    <TextField\r\n                      variant=\"outlined\"\r\n                      margin=\"normal\"\r\n                      required\r\n                      fullWidth\r\n                      name=\"Your favourite quote\"\r\n                      label=\"Your favourite quote\"\r\n                    onChange = {(e) => seQuote(e.target.value)}\r\n                      id=\"password\"\r\n                      autoComplete=\"current-password\"\r\n                    \r\n                    />\r\n                <FormHelperText>*Enter your favourite quote all time</FormHelperText>\r\n\r\n                    <Button\r\n                      type=\"submit\"\r\n                      fullWidth\r\n                      variant=\"contained\"\r\n                      color=\"secondary\"\r\n                      className={classes.submit}\r\n                      style = {{margin:'10px 0px 10px 0px'}}\r\n                      onClick = {handleUpdateProfile}\r\n                    >\r\n                    Update my profile\r\n                    </Button>\r\n            \r\n                  </form>\r\n                </div>\r\n        \r\n        </Container>\r\n      </DialogContent>\r\n      </Dialog>\r\n    </Container>\r\n    \r\n  );\r\n}\r\n\r\nexport default Signup","C:\\Users\\Pranav\\query_hook\\client-side\\src\\components\\ResetPass.js",["143","144","145"],"import React,{useState} from 'react'\r\nimport logo from '../images/login_main.png'\r\nimport '../componentcss/Login.css';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Box from '@material-ui/core/Box';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport { Fade } from '@material-ui/core';\r\nimport BG from '../images/bgpatern.jpg';\r\nimport { useParams } from 'react-router'\r\nfunction Copyright() {\r\n    return (\r\n      <Typography variant=\"body3\" color=\"textprimary\" align=\"center\" style = {{color:'white'}}>\r\n        {'Copyright © '}\r\n        <Link color=\"inherit\" href=\"https://material-ui.com/\">\r\n          Query hook\r\n        </Link>{' '}\r\n        {new Date().getFullYear()}\r\n        {'.'}\r\n      </Typography>\r\n    );\r\n  }\r\n  \r\n  const useStyles = makeStyles((theme) => ({\r\n      footer:{\r\n        color:'white',\r\n      },\r\n      parent:{\r\n        position:'absolute',\r\n        background:`url(${BG})`,\r\n        backgroundRepeat:'none',\r\n        backgroundSize:'cover',\r\n        height:'100.5vh',\r\n        width:'100%',\r\n        marginTop:'-5px'\r\n        \r\n      },\r\n      child:{\r\n        marginTop:'10rem'\r\n      },\r\n    paper: {\r\n    borderRadius:'5px',\r\n     marginTop:theme.spacing(8),\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      alignItems: 'center',\r\n      backgroundColor: 'rgba(255,255,255,0.9)',\r\n      padding:'20px'\r\n    },\r\n    avatar: {\r\n      margin: theme.spacing(2),\r\n      backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n      width: '100%', // Fix IE 11 issue.\r\n      marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n      margin: theme.spacing(3, 0, 2),\r\n    },\r\n   \r\n  }));\r\n  function Alert(props) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n  }\r\nfunction ResetPass() {\r\n    const classes = useStyles();\r\n    const [open, setOpen] = useState(false);\r\n    const [statement,setStatement] = useState('')\r\n    const [condition,setCondition] = useState('')\r\n    const [password,setPass] = useState(\"\")\r\n    const [confirmPass,setConfirm] = useState(\"\")\r\n    let {id} = useParams()\r\n    const data  = {id:id,password:password}\r\n    const handleClose = (event, reason) => {\r\n      if (reason === 'clickaway') {\r\n        return;\r\n      }\r\n  \r\n      setOpen(false);\r\n    };\r\n    //-------submitting data----------\r\n    function submit(e){\r\n      e.preventDefault()\r\n      if(password !==\"\" && confirmPass !== \"\"){\r\n           \r\n      fetch('/api/account/password/forgotPass/'+id,{\r\n        mode:'no-cors',\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Accept': 'application/json'\r\n        },\r\n        body:JSON.stringify(data)\r\n      }).then(res => res.json()).then(data => {\r\n        const {success,msg} = data\r\n        console.log(success)\r\n        if(success===200){\r\n          setCondition('success')\r\n          setStatement(msg)\r\n          setOpen(true)\r\n          setTimeout(()=>{\r\n            window.location.href = \"http://localhost:3000/login\"\r\n        },2000)\r\n        }\r\n        else{\r\n          setCondition('error')\r\n          setStatement(msg)\r\n          setOpen(true)\r\n          setTimeout(()=>{\r\n            window.location.reload()\r\n          },3000)\r\n        }\r\n      })\r\n      }\r\n     else{\r\n        setCondition('info')\r\n        setStatement(\"Enter both fields to proceed\")\r\n        setOpen(true)\r\n     }\r\n     \r\n    }\r\n    return (\r\n        <body className ={classes.parent}>\r\n      <Container component=\"main\" maxWidth=\"xs\">\r\n        <CssBaseline />\r\n        <div className={classes.paper}>\r\n        <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}  key={Fade}    anchorOrigin={{\r\n          vertical: 'top',\r\n          horizontal: 'right',\r\n        }}>\r\n        <Alert onClose={handleClose} id = \"alertgreen\" severity = {condition} >\r\n       {statement}\r\n          </Alert>\r\n       \r\n      </Snackbar>\r\n          <Avatar className={classes.avatar}>\r\n            <img src = {logo} width = \"50px\" height  = \"50px\"></img>\r\n          </Avatar>\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            Change password\r\n          </Typography>\r\n          <form className={classes.form} noValidate>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              id=\"email\"\r\n              label=\"New password\"\r\n              name=\"email\"\r\n              onChange = {(e)=>setPass(e.target.value)}\r\n              autoFocus\r\n            />\r\n            <TextField\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              name=\"password\"\r\n              label=\"Confirm password\"\r\n              type=\"password\"\r\n              id=\"password\"\r\n              autoComplete=\"current-password\"\r\n              onChange = {(e)=>setConfirm(e.target.value)}\r\n            />\r\n            \r\n            <Button\r\n              type=\"submit\"\r\n              fullWidth\r\n              variant=\"contained\"\r\n              color=\"secondary\"\r\n              className={classes.submit}\r\n              onClick = {submit}\r\n            >\r\n              Confirm new password\r\n            </Button>\r\n            \r\n          </form>\r\n        </div>\r\n        <Box mt={8}>\r\n          <Copyright/>\r\n        </Box>\r\n      </Container>\r\n      </body>\r\n    );\r\n}\r\n\r\nexport default ResetPass\r\n","C:\\Users\\Pranav\\query_hook\\client-side\\src\\components\\Forgot.js",["146"],"import React,{useState} from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Container from '@material-ui/core/Container';\r\nimport EmailIcon from '@material-ui/icons/Email';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport { Fade } from '@material-ui/core';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nconst useStyles = makeStyles((theme) => ({\r\n  button:{\r\n    margin:'1rem 0rem 0rem 3rem'\r\n  },\r\n    margin: {\r\n      margin: theme.spacing(10),\r\n    },\r\n  }));\r\n  function Alert(props) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n  }\r\n function Forgot() {\r\n  const classes = useStyles()\r\n  const [open, setOpen] = useState(false);\r\n  const [statement,setStatement] = useState('')\r\n    const [condition,setCondition] = useState('')\r\n  const [email,setEmail] = useState('')\r\n  const data = {email:email}\r\n  const handleClose = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n\r\n    setOpen(false);\r\n  };\r\n  function submit(e){\r\n    e.preventDefault()\r\n    if(email !==\"\"){\r\n      fetch('/api/account/password/request/',{\r\n        mode:'no-cors',\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Accept': 'application/json'\r\n        },\r\n        body:JSON.stringify(data)\r\n      }).then(res => res.json()).then(data => {\r\n        if(data.success ===200){\r\n          setCondition('success')\r\n      setStatement(data.msg)\r\n      setOpen(true)\r\n        }\r\n        else{\r\n          setCondition('info')\r\n      setStatement(data.msg)\r\n      setOpen(true)\r\n        }\r\n      })\r\n    }\r\n    else{\r\n      setCondition('error')\r\n      setStatement(\"Please Enter Your Email\")\r\n      setOpen(true)\r\n    }\r\n  }\r\n    return (\r\n      <div className = {classes.parent}>\r\n     <Container component=\"main\" maxWidth=\"xs\">\r\n     <CssBaseline />\r\n        <div className={classes.paper}>\r\n        <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}  key={Fade}    anchorOrigin={{\r\n          vertical: 'top',\r\n          horizontal: 'center',\r\n        }}>\r\n        <Alert onClose={handleClose} id = \"alertgreen\" severity = {condition} >\r\n           {statement}\r\n          </Alert>\r\n       \r\n      </Snackbar>\r\n        <div className={classes.margin} >\r\n        <h2 style = {{color:'#ecb390'}}>Forgot password</h2>\r\n        <h4 style = {{color:'#cc7351'}} >Please enter email </h4>\r\n        <Grid container spacing={1} alignItems=\"flex-end\">\r\n        \r\n          <Grid item>\r\n            <EmailIcon />\r\n          </Grid>\r\n          <Grid item>\r\n            <TextField id=\"input-with-icon-grid\" label=\"Enter email\" type = 'email' name=\"email\"\r\n              onChange = {(e)=>setEmail(e.target.value)}\r\n              autoFocus/>\r\n          </Grid>\r\n          <Button className = {classes.button} variant=\"outlined\" color=\"primary\" endIcon={<Icon>send</Icon>} size=\"small\" onClick = {submit}>Send request</Button>\r\n        </Grid>\r\n      </div>\r\n      </div>\r\n      </Container>\r\n      </div>\r\n      \r\n\r\n    )\r\n}\r\nexport default Forgot;\r\n","C:\\Users\\Pranav\\query_hook\\client-side\\src\\components\\Navbar.js",["147","148","149","150","151","152","153","154","155","156","157"],"import React,{useState,useContext,useEffect} from 'react'\r\nimport '../componentcss/Navbar.css'\r\nimport Logo from '../images/login_main.png'\r\nimport { Link } from 'react-router-dom'\r\nimport { Input } from '@material-ui/core'\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport { fade, makeStyles } from '@material-ui/core/styles';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport Button from '@material-ui/core/Button';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport AccountCircle from '@material-ui/icons/AccountCircle';\r\nimport Authapi from '../components/ContextApi'\r\nimport Cookies from 'js-cookie'\r\n// ----------rendering menu for users\r\n\r\nconst useStyles = makeStyles((theme) =>({\r\n  \r\n    search_parent:{\r\n        display:'flex',\r\n        alignItems:'center',\r\n        alignSelf:'center',\r\n        padding:theme.spacing(0,11),\r\n       \r\n        \r\n       \r\n    },\r\n    search: {\r\n       height:'2rem',\r\n       display:'flex',\r\n       alignItems:'center',\r\n       alignSelf:'center',\r\n        borderRadius: theme.shape.borderRadius,\r\n        backgroundColor: fade(theme.palette.common.white, 0.17),\r\n        '&:hover': {\r\n          backgroundColor: fade(theme.palette.common.white, 0.25),\r\n        },\r\n       \r\n        width: '100%',\r\n        [theme.breakpoints.up('sm')]: {\r\n          marginLeft: theme.spacing(1),\r\n          width: 'auto',\r\n        },\r\n      },\r\n      searchIcon: {\r\n        color:'white',  \r\n        padding: theme.spacing(0, 2),\r\n        height: '100%',\r\n        position: 'absolute',\r\n        pointerEvents: 'none',\r\n        display: 'flex',\r\n        '&:hover': {\r\n          cursor:'pointer'\r\n        },\r\n        \r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n      },\r\n      inputRoot: {\r\n        color: 'inherit',\r\n      },\r\n      inputInput: {\r\n        padding: theme.spacing(1, 1, 1, 0),\r\n        color:'white',\r\n        // vertical padding + font size from searchIcon\r\n        paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n        transition: theme.transitions.create('width'),\r\n        width: '100%',\r\n        [theme.breakpoints.up('sm')]: {\r\n          width: '12ch',\r\n          '&:focus': {\r\n            width: '20ch',\r\n          },\r\n        },\r\n      },\r\n      button1:{\r\n        '&:hover': {\r\n          cursor:'pointer'\r\n        },\r\n        fontSize:'30px',\r\n        color:'wheat',\r\n        display:'flex',\r\n        alignContent:'center',\r\n        alignSelf:'center',\r\n        marginLeft:'15rem'\r\n          \r\n        \r\n      },\r\n      showData:{\r\n      minHeight:'25vh',\r\n      width:'20%',\r\n      position:'absolute',\r\n      backgroundColor:'white',\r\n      left:'65%',\r\n      top:'100%'\r\n      }\r\n      \r\n}))\r\n\r\nexport default function Navbar() {\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const [data,setData] = useState([])\r\n  const [searchedOrNot,setSearch] = React.useState('none')\r\n  const [input,setInput] = React.useState('')\r\n  const Auth = useContext(Authapi)\r\n  const handleClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\nuseEffect(()=>{\r\n  fetch('/searchQuery').then(res => res.json()).then(responce =>{\r\n    setData(responce)\r\n  },[])\r\n})\r\n\r\n  const handleClose = (event) => {\r\n     setAnchorEl(event.currentTarget);\r\n     setAnchorEl(null);\r\n  };\r\n  const handleLogout = () =>{\r\n    Cookies.remove('id')\r\n    Auth.setAuth(false)\r\n    setAnchorEl(null);\r\n  }\r\n  const handleSearch = () =>{\r\n    const data = {input}\r\n\r\n  }\r\n    const classes = useStyles()\r\n    return (\r\n      \r\n       <nav className = 'nav_parent'>\r\n        {/* query hook log and title */}\r\n        <div className = 'logo_parent'>\r\n            <img src ={Logo}></img>\r\n            <span className = \"logo_title\">Query hook</span>\r\n        </div>\r\n        {/* navabar links */}\r\n        <div className = 'nav_links'>\r\n        <Link to='/' className = 'links'>\r\n           Home\r\n        </Link>\r\n        \r\n        <Link to='/' className = 'links'>\r\n           Questions\r\n        </Link>\r\n        <Link to='/' className = 'links'>\r\n          Most viewed\r\n        </Link>\r\n        <Link to='/' className = 'links'>\r\n           Recent questions\r\n        </Link>\r\n        </div>\r\n        {/* navbar search bar */}\r\n       \r\n          <div className = {classes.showData} style = {{display:searchedOrNot}}>\r\n\r\n          </div>\r\n        {/* navbar sign in or sign up button and profile*/}\r\n        <AccountCircle aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClick} className = {classes.button1}></AccountCircle>\r\n<Menu\r\n  id=\"simple-menu\"\r\n  anchorEl={anchorEl}\r\n  keepMounted\r\n  open={Boolean(anchorEl)}\r\n  onClose={handleClose}\r\n>\r\n<Authapi.Consumer>\r\n        { ({Auth}) => {\r\n          if(Auth){\r\n            return (<>\r\n            \r\n            <MenuItem onClick={handleLogout}>Logout your account</MenuItem>\r\n            </>)\r\n          }\r\n          else{\r\n           return (\r\n           <Link to = '/login' style = {{textDecoration:'none'}}><MenuItem onClick={handleClose}>Login into your account</MenuItem></Link>\r\n           )\r\n            \r\n          }\r\n        }}\r\n      </Authapi.Consumer>\r\n  \r\n</Menu>\r\n       </nav>\r\n    )\r\n}\r\n\r\n","C:\\Users\\Pranav\\query_hook\\client-side\\src\\components\\Cover.js",["158"],"import React from 'react'\r\nimport {makeStyles} from '@material-ui/core/styles'\r\nimport backgroundCover from '../images/action.png'\r\nimport {Link} from 'react-router-dom'\r\nimport Button from '@material-ui/core/Button'\r\nimport 'fontsource-roboto';\r\nconst useStyles = makeStyles((theme) => ({\r\n    parent_main:{\r\n        position:'relative',\r\n        backgroundImage:`url(${backgroundCover})`,\r\n       backgroundRepeat:'none',\r\n        width:'100%',\r\n        height:'250px',\r\n        marginTop:'3.5rem'\r\n     \r\n    },\r\n    parent_child:{\r\n       \r\n       position:'relative',\r\n        padding:'4rem 10rem 3rem 10rem !important',\r\n        display:'flex',\r\n        alignContent:'center',\r\n        justifyContent:'center',\r\n        flexWrap:'nowrap',\r\n        justifyContent:'space-evenly'\r\n    },\r\n    typograpy:{\r\n        fontFamily:'Roboto, Arial, sans-serif',\r\n        color:'white',\r\n        width:'80%'\r\n    },\r\n    heading:{\r\n        fontSize:'23px',\r\n        fontWeight:'800'\r\n    },\r\n    desc:{\r\n        marginTop:'1rem',\r\n        width:\"68%\",\r\n        fontSize:'16px'\r\n    },\r\n    submit:{\r\n        marginTop:'2rem',\r\n        textTransform:'Capitalize !important'\r\n    }\r\n\r\n}))\r\nexport default function Cover() {\r\n    const classes = useStyles()\r\n    return (\r\n        <div className = {classes.parent_main} >\r\n            <div className = {classes.parent_child}>\r\n                <div className = {classes.typograpy}>\r\n                    <p className = {classes.heading}>Share & grow the world's knowledge!</p>\r\n                    <p className = {classes.desc}>We want to connect the people who have knowledge to the people who need it, to bring together people with different perspectives so they can understand each other better, and to empower everyone to share their knowledge.\r\n                    </p>\r\n                </div>\r\n                <div className = 'createAccount_parent'>\r\n                <Link to = '/signup'>\r\n                <Button\r\n                fullWidth\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.submit}\r\n                >Create A New account</Button>\r\n                </Link>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\Pranav\\query_hook\\client-side\\src\\components\\Sidenav.js",["159","160"],"import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport PublicIcon from '@material-ui/icons/Public';\r\nimport PersonPinIcon from '@material-ui/icons/PersonPin';\r\nimport ContactSupportIcon from '@material-ui/icons/ContactSupport';\r\nconst drawerWidth = 200;\r\nconst useStyles = makeStyles((theme) => ({\r\n  special:{\r\n    marginTop:'5px'\r\n  },\r\n  sidenav_parent:{\r\n    backgroundColor:'inherit',\r\n    width:'25%',\r\n   \r\n   \r\n  },\r\n  sidenav_child:{\r\n    position:'abosulte',\r\n   marginLeft:'10rem',\r\n   marginTop:'3rem'\r\n\r\n  },\r\n  sidenav_links_parent:{\r\n    fontFamily:'Roboto, Arial, sans-serif',\r\n    display:'flex',\r\n   alignSelf:'center',\r\n   fontWeight:'700',\r\n    alignContent:'center',\r\n    marginBottom:'30px',\r\n    fontSize:'14px !important',\r\n    '&:hover':{\r\n      color:'blue',\r\n      cursor:'pointer'\r\n    },\r\n    icon:{\r\n      fontSize:'25px !important'\r\n    }\r\n  }\r\n  \r\n}));\r\nexport default function Sidenav(){\r\n    const classes = useStyles()\r\n    return(\r\n       <div className  = {classes.sidenav_parent}>\r\n         <div className = {classes.sidenav_child}>\r\n          <div className = {classes.sidenav_links_parent}>\r\n            <HomeIcon className = {classes.icon}/>\r\n            <p>Home</p>\r\n          </div>\r\n          <div className = {classes.sidenav_links_parent}>\r\n            <ContactSupportIcon className = {classes.icon} />\r\n            <p>Trending questions</p>\r\n          </div>\r\n          <div className = {classes.sidenav_links_parent}>\r\n            <PersonPinIcon className = {classes.icon}/>\r\n            <p>Recent questions</p>\r\n          </div>\r\n          \r\n         </div>\r\n       </div>\r\n    )\r\n}\r\n\r\n","C:\\Users\\Pranav\\query_hook\\client-side\\src\\components\\HomeDataContainer.js",["161","162","163","164"],"import React,{useEffect, useState ,Context, createContext} from 'react'\r\nimport Sidenav from '../components/Sidenav'\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Content from '../components/ContentParent'\r\nimport RightSideNav from '../components/RightSideNav'\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Async from 'react-async';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport AlertBar from '../components/AlertBar'\r\nimport { get } from 'js-cookie';\r\nconst bodyData = createContext()\r\nconst useStyles = makeStyles((theme) => ({\r\n    HomeDataContainer_parent:{\r\n        backgroundColor:'#F2F2F2',\r\n        display:'flex',\r\n        \r\n    },\r\n    backdrop: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        color: '#fff',\r\n      },\r\n}))\r\n function HomeDataContainer() {\r\n    const [data,setData] = useState([])\r\n    const [isload,setload] = useState(true)   \r\n    useEffect(() =>{\r\n       async function get(){\r\n         \r\n            fetch('/postsDrawer').then(async data => await data.json()).then(result =>{ setData(result)\r\n             setload(false)\r\n             return data\r\n            }).catch(err => {\r\n                <AlertBar state = {\"someting went wrong\"} type = {'error'}/>\r\n                setload(false)\r\n                \r\n            })\r\n      \r\n        }\r\n         get()\r\n    },[data])\r\n    const classes = useStyles()\r\n    return (\r\n            \r\n        <div className = {classes.HomeDataContainer_parent}>\r\n        <Backdrop className={classes.backdrop} open={isload} >\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n            {/* sidenav */}\r\n            <Sidenav/>\r\n            {/* content */}\r\n            \r\n                <Content value = {data} />\r\n           \r\n            \r\n            {/* Right side updates */}\r\n            <RightSideNav value = {data}/>\r\n        </div>\r\n    )\r\n}\r\nexport default HomeDataContainer\r\n","C:\\Users\\Pranav\\query_hook\\client-side\\src\\components\\ContentParent.js",["165"],"import React,{useState} from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport HomeRecentQuestion from '../components/HomeRecentQuestion.jsx'\r\nimport MostViewed from '../components/MostViewed'\r\n//--------------tab related functions--------------\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`simple-tabpanel-${index}`}\r\n      aria-labelledby={`simple-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box p={3}>\r\n          <Typography>{children}</Typography>\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\nTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  index: PropTypes.any.isRequired,\r\n  value: PropTypes.any.isRequired,\r\n};\r\nfunction a11yProps(index) {\r\n  return {\r\n    id: `simple-tab-${index}`,\r\n    'aria-controls': `simple-tabpanel-${index}`,\r\n  };\r\n}\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    backgroundColor: theme.palette.background.paper,\r\n    width: 750,\r\n  },\r\n  content_parent:{\r\n    width:'51%',\r\n    \r\n    \r\n  },\r\n  tabIndex:{\r\n    textTransform:'Capitalize !important',\r\n    display:'flex !important'\r\n  }\r\n}));\r\n//----------main function of these component--------------\r\nexport default function ContentParent(props) {\r\n  const classes = useStyles();\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n    return (\r\n        <div className = {classes.content_parent}>\r\n             <div className={classes.root}>\r\n             \r\n      <AppBar position=\"static\" style = {{marginTop:'1rem'}} >\r\n        <Tabs value={value} onChange={handleChange} aria-label=\"simple tabs example\" style = {{paddingTop:'5px'}} >\r\n          <Tab label=\"Recent Questions\" {...a11yProps(0)} className ={classes.tabIndex} />\r\n          <Tab label=\"Most viewed\" {...a11yProps(1)} className ={classes.tabIndex}/>\r\n        </Tabs>\r\n      </AppBar>\r\n      <TabPanel value={value} index={0}  >\r\n     <HomeRecentQuestion value = {props.value} />\r\n      </TabPanel>\r\n      <TabPanel value={value} index={1}>\r\n     <MostViewed />\r\n      </TabPanel>\r\n     \r\n    </div>\r\n  \r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\Pranav\\query_hook\\client-side\\src\\components\\RightSideNav.js",["166","167","168","169","170","171","172"],"import React from 'react'\r\nimport {makeStyles} from '@material-ui/core/styles'\r\nimport Button from '@material-ui/core/Button'\r\nimport {Link} from 'react-router-dom'\r\nimport Divider from '@material-ui/core/Divider';\r\nimport 'fontsource-roboto';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport QuestionAnswerIcon from '@material-ui/icons/QuestionAnswer';\r\nimport TrendingUpIcon from '@material-ui/icons/TrendingUp';\r\nimport DialogueAsk from '../components/QustionAskModel'\r\nimport Truncate from 'react-truncate'\r\nimport Logo from '../images/action.png'\r\nimport Async from 'react-async';\r\n\r\nconst RenderData = (data) =>{\r\n    console.log(data)\r\n}\r\nconst useStyles = makeStyles((theme) =>({\r\n    root:{\r\n        width:'100ch'\r\n    },\r\n    RightSideNav_parent:{\r\n       fontFamily:'Roboto',\r\n        backgroundColor:'white',\r\n        height:'auto',\r\n        width:'17%',\r\n        borderRadius:'5px'\r\n    },\r\n    ask_question_parent:{\r\n        padding:'18px',\r\n        width:'100%',\r\n       \r\n       \r\n    },\r\n    \r\n    divider:{\r\n        height:'3px !important'\r\n    },\r\n    blocks_parent_2:{\r\n\r\n        display:'grid',\r\n        gridTemplateColumns:'1fr 1fr'\r\n    },\r\n    blocks_parent:{\r\n        fontFamily:'Roboto, Arial, sans-serif',\r\n        height:'18vh',\r\n        backgroundColor:'#F2F2F2'\r\n    },\r\n    blocks_child:{\r\n        \r\n        margin:'2px',\r\n        height:'8vh',\r\n        backgroundColor:'white',\r\n        textAlign:'center',\r\n        \r\n    },\r\n    block_content:{\r\n       fontWeight:'600',\r\n       fontSize:'12px'\r\n    },\r\n    block_counter:{\r\n        fontWeight:'700',\r\n        fontSize:'22px',\r\n        color:'#457b9d'\r\n    },\r\n    small: {\r\n        width: theme.spacing(3),\r\n        height: theme.spacing(3),\r\n      },\r\n      popular_uploads_parent:{\r\n          display:'flex',\r\n          padding:'10px',\r\n          justifyContent:'space-evenly',\r\n          padding:'10px 3px 25px 10px'\r\n      },\r\n      popular_question_head:{\r\n        fontSize:'17px',\r\n        padding:'10px',\r\n        textAlign:'center',\r\n        color:'#e07a5f'\r\n      },\r\n      popular_desc:{\r\n         marginLeft:'1rem' ,\r\n         fontWeight:'600',\r\n         color:'#032b43',\r\n         fontSize:'15px',\r\n         \r\n        \r\n      },\r\n      popular_desc_answer:{\r\n          display:'flex',\r\n          justifyContent:'flex-start',\r\n          alignSelf:'center',\r\n          margin:'10px',\r\n          color:'grey',\r\n          fontSize:'13px !important'\r\n      },\r\n      p:{\r\n        marginLeft:'5px' ,  \r\n      },\r\n      divider_popular_question:{\r\n        height:'2px !important'\r\n      }\r\n}))\r\nexport default function RightSideNav(props) {\r\n    const classes = useStyles()\r\n    const data = props.value\r\n    const [count,setCount] = React.useState([])\r\n    const [user,setUser] = React.useState(0);\r\n    const [qns,setQns] = React.useState(0);\r\n    const [ans,setAns] = React.useState(0);\r\n    const [bestAns,setBest] = React.useState(0);\r\n    React.useEffect(async ()=>{\r\n         fetch('/getCountAll').then(res => res.json()).then(dat =>{\r\n            setCount(dat.result)\r\n            setUser(dat.result[0].users);\r\n            setQns(dat.result[1].users)\r\n            setAns(dat.result[2].users)\r\n            setBest(dat.result[3].users)\r\n            \r\n        })\r\n        return data\r\n    },[count])\r\n   console.log(count)\r\n    return (\r\n        <div className = {classes.RightSideNav_parent}>\r\n            {/* Ask question */}\r\n            \r\n            <div className ={classes.ask_question_parent}>\r\n            <DialogueAsk />\r\n            </div>\r\n            <Divider className ={classes.divider}/>\r\n            {/* Total question bloks */}\r\n            <div className = {classes.blocks_parent}>\r\n            <div className ={classes.blocks_parent_2}>\r\n            <Async>\r\n      {({ count, err, isLoading }) =>\r\n      {\r\n          if (isLoading) return <h1>loading..</h1>\r\n      if (err) return `Something went wrong: ${err.message}`\r\n      if (data){\r\n          return <>\r\n                <div className = {classes.blocks_child} style = {{borderLeft:'2px solid blue'}}>\r\n                    <p className = {classes.block_content}>Questions</p>\r\n                    <p className = {classes.block_counter}>{qns}</p>\r\n                </div>\r\n                <div className = {classes.blocks_child} style = {{borderRight:'3px solid red'}}>\r\n                <p className = {classes.block_content}>Answers</p>\r\n                    <p className = {classes.block_counter}>{ans}</p>\r\n                </div>\r\n                <div className = {classes.blocks_child} style = {{borderLeft:'3px solid red'}}>\r\n                <p className = {classes.block_content}>Users</p>\r\n                    <p className = {classes.block_counter}>{user}</p>\r\n                </div>\r\n                <div className = {classes.blocks_child} style = {{borderRight:'3px solid blue'}}>\r\n                <p className = {classes.block_content}>Best answers</p>\r\n                    <p className = {classes.block_counter}>{bestAns}</p>\r\n                </div>\r\n          </>\r\n            }\r\n      }\r\n\r\n        }\r\n\r\n</Async>\r\n            </div>\r\n            </div>\r\n            {/* Popular question */}\r\n            \r\n            <div className = {classes.popular_question_parent}>\r\n                <h4 className = {classes.popular_question_head}>Popular uploads</h4>\r\n                <Divider className ={classes.divider}/>\r\n                {\r\n                    data.map((content,index) =>{\r\n                return <> <div className = {classes.popular_uploads_parent} key= {index}>\r\n                <Avatar  alt=\"\" src={Logo} className={classes.small} >{content.firstName[0]}</Avatar>\r\n                <div className = {classes.popular_desc_parent} key= {index} >\r\n                <p  className = {classes.popular_desc}><a href ={'http://localhost:3000/viewPost/'+content.postid}><Truncate lines={2} ellipsis={<span>..... </span>}>\r\n                        {content.qnsTitle}\r\n            </Truncate></a></p>\r\n                <div className = {classes.popular_desc_answer} key= {index} >\r\n                    <QuestionAnswerIcon style = {{fontSize:'18px'}} key= {index} />\r\n                    <span className = {classes.p}  >2 Answers</span>\r\n                </div>\r\n                </div>\r\n                </div>\r\n                <Divider className ={classes.divider_popular_question}/>\r\n                </>\r\n        \r\n    }\r\n                    )\r\n                }\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\Pranav\\query_hook\\client-side\\src\\components\\HomeRecentQuestion.jsx",["173","174","175","176","177","178"],"import React from 'react'\r\nimport {makeStyles} from '@material-ui/core/styles'\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport ArrowDropDownTwoToneIcon from '@material-ui/icons/ArrowDropDownTwoTone';\r\nimport ArrowDropUpTwoToneIcon from '@material-ui/icons/ArrowDropUpTwoTone';\r\nimport LocalOfferTwoToneIcon from '@material-ui/icons/LocalOfferTwoTone';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport QuestionAnswerIcon from '@material-ui/icons/QuestionAnswer';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport Logo from '../images/action.png'\r\nimport { BodyData }  from '../components/HomeDataContainer'\r\nimport Truncate from 'react-truncate'\r\nimport ReactHtmlParser from 'react-html-parser'\r\nimport Divider from '@material-ui/core/Divider';\r\nconst useStyles = makeStyles((theme) =>({\r\n    small: {\r\n        width: theme.spacing(3.5),\r\n        height: theme.spacing(3.5),\r\n      },\r\n    homeRecentQnsParent:{\r\n        display:'flex',\r\n       backgroundColor:'white',\r\n       marginBottom:'2px'\r\n        \r\n    },\r\n    avatar_parent:{\r\n        display:'flex',\r\n        flexDirection:'column',\r\n        alignItems:'center',\r\n        \r\n    },\r\n    avatar:{\r\n        border:'2px solid blue',\r\n        borderRadius:'50%',\r\n        padding:'3px'\r\n    },\r\n    voted_parent:{\r\n        textAlign:'center',\r\n        display:'flex',\r\n        flexDirection:'column',\r\n        justifyContent:'space-evenly',\r\n        margin:theme.spacing(2,0),\r\n        fontSize:'18px',\r\n        fontWeight:'800',\r\n        color:'#565264'\r\n    },\r\n    voted_up:{\r\n        fontSize:'50px !important',\r\n        color:'#997b66',\r\n        '&:hover':{\r\n            cursor:'pointer',\r\n            color:'#f68e5f'\r\n        }\r\n    },\r\n    voted_down:{\r\n        fontSize:'50px !important',\r\n        '&:hover':{\r\n            cursor:'pointer',\r\n            color:'#f68e5f'\r\n        }\r\n    },\r\n    recentQns_parent:{\r\n        margin:'0rem 1rem 1rem 1rem',\r\n        marginBottom:'2rem',\r\n    },\r\n    recentQns_tags_parent:{\r\n        padding:'5px',\r\n        display:'flex',\r\n        margin:'-1rem 1rem .5rem 0rem',\r\n    },\r\n    recentQns_name:{\r\n         fontSize:'16px',\r\n         color:'blue',\r\n         fontWeight:'900'\r\n    },\r\n    recentQns_occupation:{\r\n        alignSelf:'center',\r\n        marginLeft:'0.5rem',\r\n        fontSize:'11px',\r\n        textAlign:'center',\r\n        padding:'2px 4px 2px 4px',\r\n        backgroundColor:'#e09f3e',\r\n        color:'white',\r\n        fontWeight:'800'\r\n    },\r\n    recentQns_askedIn:{\r\n        alignSelf:'center',\r\n        marginLeft:'1rem',\r\n        fontSize:'14px',\r\n        fontWeight:'600',\r\n        color:'grey'\r\n    },\r\n    recentQns_askedIn_bold:{\r\n        color:'#9e2a2b',\r\n        fontWeight:'800',\r\n        marginRight:'3px'  \r\n    },\r\n    recentQns_title:{\r\n        marginTop:'-1rem',\r\n        padding:'3px',\r\n        fontSize:'20px',\r\n        fontWeight:'800'\r\n    },\r\n    recentQns_answers:{\r\n        padding:'3px',\r\n        fontSize:'15px',\r\n        lineHeight:'35px'\r\n    },\r\n    recentQns_topic_tags:{\r\n      padding:'1.5rem 1rem 1rem 0rem'\r\n    },\r\n    chip:{\r\n        marginLeft:'1rem'\r\n    },\r\n    recentQns_views_parent:{\r\n        display:'flex',\r\n        \r\n        padding:'1rem 1rem 1rem 0rem',\r\n        backgroundColor:'#d8f3dc'\r\n    },\r\n    popular_desc_view:{\r\n        display:'flex',\r\n      justifyContent:'center',\r\n      alignSelf:'center',\r\n      alignItems:'center',\r\n        marginLeft:'1rem',\r\n        border:'#f9844a solid 1px',\r\n        padding:'5px',\r\n        fontSize:'13px',\r\n       \r\n    },\r\n    views_icon:{\r\n        fontSize:'20px',\r\n         marginRight:'0.5rem'\r\n    }\r\n\r\n}))\r\nexport default function HomeRecentQuestion(props) {\r\n    const classes = useStyles()\r\n    const data = props.value\r\n     \r\n     let count = 0\r\n     //handling likes\r\n     const handleLike = (id,likes) =>{\r\n         const data = {id,likes}\r\n\r\n        fetch('/postLike',{\r\n            mode:'no-cors',\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              'Accept': 'application/json'\r\n            },\r\n            body:JSON.stringify(data)\r\n          }).then(res => res.json()).then(responce =>{console.log(responce)})\r\n     }\r\n     const  handleViews = (e,views) =>{\r\n         const data = {e,views}\r\n        fetch('/updateViews',{\r\n            mode:'no-cors',\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              'Accept': 'application/json'\r\n            },\r\n            body:JSON.stringify(data)\r\n          })\r\n     }\r\n    return (\r\n        data.map(content => {\r\n            let count = content.tags.split(',')\r\n            return (    \r\n               \r\n                <div className = {classes.homeRecentQns} >\r\n            <div className ={classes.homeRecentQnsParent}>\r\n                <div className = {classes.avatar_parent}>\r\n                {/* \"#\" + ((1<<24)*Math.random() | 0).toString(16) */}\r\n                 <div className ={classes.avatar}>\r\n                    <Avatar alt={content.firstName} style = {{backgroundColor:content.profile_img}} src = {content.profile_img} className = {classes.small}>{content.firstName[0].toUpperCase()}</Avatar>\r\n                 </div>\r\n                 <div className ={classes.voted_parent}>\r\n                     <ArrowDropUpTwoToneIcon className = {classes.voted_up} onClick = {() => handleLike(content.postid,content.postLike+1)}/>\r\n                     <p>{content.postLike}</p>\r\n                    <ArrowDropDownTwoToneIcon className ={classes.voted_down} onClick = {() => handleLike(content.postid,content.postLike-1)}/>\r\n                 </div>\r\n                </div>\r\n                <div className ={classes.recentQns_parent}>\r\n                    <div className = {classes.recentQns_tags_parent} key = {content.postid}>\r\n                      <p className = {classes.recentQns_name}>{`${content.firstName} ${content.lastName}`}</p>\r\n                      <p className = {classes.recentQns_occupation}>{content.currentWorking}</p>\r\n                      <p className = {classes.recentQns_askedIn}><b className = {classes.recentQns_askedIn_bold}>Asked in:</b>${content.posted_date}</p>\r\n                    </div>\r\n                    <div className ={classes.recentQns_desc}>\r\n                        <p className ={classes.recentQns_title}><a href = {'/viewPost/'+content.postid} onClick= {() => handleViews(content.postid,content.views)}>{content.qnsTitle}</a></p>\r\n                        <p className ={classes.recentQns_answers}><Truncate lines={3} ellipsis={<span>... <a href='http://localhost:3000/viewPost/${content.postid}'>Read more</a></span>}>\r\n                        {ReactHtmlParser(content.Question_body)}\r\n            </Truncate></p>\r\n                    </div>\r\n                    <div className ={classes.recentQns_topic_tags}>\r\n                        {content.tags.split(',').map(chip =>{\r\n                           return <> <Chip   label={chip} variant=\"filled\" color=\"primary\" size=\"small\" icon={<LocalOfferTwoToneIcon />} /></>\r\n                        })}                    \r\n                    </div>\r\n                    <div className ={classes.recentQns_views_parent}>\r\n                            <div className = {classes.popular_desc_view}>\r\n                                <QuestionAnswerIcon className = {classes.views_icon}/>\r\n                                <div className = {classes.p}><a href={'http://localhost:3000/viewPost/'+content.postid}>2 Answers</a></div>\r\n                            </div>\r\n                            <div className = {classes.popular_desc_view}>\r\n                                <VisibilityIcon className = {classes.views_icon}/>\r\n                                <div className = {classes.p}>{content.views} views</div>\r\n                            </div>\r\n                    </div>\r\n                    \r\n                </div>\r\n                 \r\n            </div>\r\n            \r\n        </div>\r\n            )\r\n           \r\n        })\r\n        \r\n    )\r\n}\r\n","C:\\Users\\Pranav\\query_hook\\client-side\\src\\components\\QustionAskModel.jsx",["179","180","181","182","183","184","185","186","187","188","189","190"],"import React,{useState , useContext} from 'react'\r\nimport {Redirect , Link} from 'react-router-dom'\r\nimport { makeStyles, useTheme }  from '@material-ui/core/styles'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Input from '@material-ui/core/Input';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Button from '@material-ui/core/Button'\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport { Fade } from '@material-ui/core';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport PhotoCamera from '@material-ui/icons/PhotoCamera';\r\nimport { Editor } from '@tinymce/tinymce-react';\r\nimport LiveHelpIcon from '@material-ui/icons/LiveHelp';\r\nimport Cookies from 'js-cookie'\r\nimport e from 'cors';\r\nimport Authapi from './ContextApi';\r\nconst useStyles = makeStyles((theme) => ({\r\n  button:{\r\n    width:'14rem !important',\r\n    \r\n},\r\n    askDoubt:{\r\n     fontSize:'18px',\r\n     marginRight:'5px',\r\n     color:'blue'\r\n    },\r\n    form: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        width: 'fit-content',\r\n      },\r\n      formControl: {\r\n        marginTop: theme.spacing(0),\r\n        minWidth: 200\r\n      \r\n      },\r\n      formControlLabel: {\r\n        marginTop: theme.spacing(2),\r\n      },\r\n}))\r\n//------------------value relted to tags---------------\r\nfunction getStyles(name, personName, theme) {\r\n    return {\r\n      fontWeight:\r\n        personName.indexOf(name) === -1\r\n          ? theme.typography.fontWeightRegular\r\n          : theme.typography.fontWeightMedium,\r\n    };\r\n  }\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 1;\r\nconst MenuProps = {\r\n  PaperProps: {\r\n    style: {\r\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n      width: 250,\r\n    },\r\n  },\r\n};\r\nconst names = [\r\n    'A.NET',\r\n    'ALGOL ',\r\n    'Arc',\r\n    'AppleScript',\r\n    'Apex',\r\n    'Carlos Abbott',\r\n    'Miriam Wagner',\r\n    'Bradley Wilkerson',\r\n    'Virginia Andrews',\r\n    'Kelly Snyder',\r\n    '',\r\n    ''\r\n  ];\r\n  \r\n    export default  function QustionAskModel() {\r\n        var useDarkMode = window.matchMedia('(prefers-color-scheme: dark)').matches;\r\n        const theme = useTheme();\r\n        const Auth = useContext(Authapi)\r\n        const [body,setBody] = useState(\"\")\r\n        const [qnsTitle,setqnsTitle] = useState(\"\")\r\n        const [nameFile,setNameFile] = React.useState([])\r\n        const [tags, setTags] = React.useState([]);\r\n        const classes = useStyles()\r\n        const [category, setCategory] = React.useState('');\r\n        const [open, setOpen] = React.useState(false);\r\n        const [is_updates,setUpdates] = useState(false)\r\n        const handleChange = (event) => {\r\n        setCategory(event.target.value);\r\n        };\r\n       \r\n        const handleClickOpen = () => {\r\n        setOpen(true)\r\n         \r\n        };\r\n        const handleClose = () => {\r\n          setOpen(false);\r\n        };\r\n        const handleSubmitData = () => {\r\n          const html = handleEditorChange\r\n          \r\n          var id = Cookies.get('id')\r\n          const data = {qnsTitle,category,nameFile,tags,body,id,is_updates}\r\n          \r\n          fetch('/posts',{\r\n            mode:'no-cors',\r\n            method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Accept': 'application/json'\r\n        },\r\n        body:JSON.stringify(data)\r\n          }).then(res => res.json()).then(dat =>{\r\n            \r\n          })\r\n      \r\n          setOpen(false)\r\n        };\r\n  const handleChangeTags = (event) => {\r\n    setTags(event.target.value);\r\n  };\r\n  const handleEditorChange = (e) => {\r\n   setBody(e.target.getContent()) \r\n  }\r\n\r\n  \r\n    return (\r\n      <div className ={classes.ask_question_parent}>\r\n      <Authapi.Consumer>\r\n        {\r\n          ({Auth}) =>{\r\n       \r\n            if(Auth){\r\n             \r\n              return (\r\n               \r\n                <Button\r\n                fullWidth\r\n                className = {classes.button}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n               className = {classes.button}\r\n               onClick={handleClickOpen}\r\n                >Ask a question</Button>)\r\n            }\r\n            else{\r\n              return ( <Link to = '/login'><Button\r\n                fullWidth\r\n                className = {classes.button}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n               className = {classes.button}\r\n                >Ask a question</Button></Link>)\r\n            }\r\n          }\r\n        }\r\n     </Authapi.Consumer>\r\n      \r\n        <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\" fullWidth= 'true'\r\n                maxWidth= 'md'>           \r\n        <div className = {classes.form}>\r\n           <DialogTitle id=\"form-dialog-title\" style = {{color:'#023e8a'}} ><LiveHelpIcon className = {classes.askDoubt}/>Ask your Doubt here.....!</DialogTitle>\r\n             <DialogContent>\r\n               <Container component=\"main\" maxWidth=\"md\">\r\n                  <CssBaseline />\r\n      \r\n                <div className={classes.paper}>\r\n       \r\n              <form className={classes.form} >\r\n                    <Grid container spacing={2}>\r\n            \r\n                <TextField\r\n                id=\"standard-full-width\"\r\n                label=\"Title for your question\"\r\n                style={{ margin: 8 }}\r\n                placeholder=\"Type here....\"\r\n                helperText=\"*Please choose an appropriate title for the question so it can be answered easily!\"\r\n                fullWidth\r\n                margin=\"normal\"\r\n                onChange = {(e) =>setqnsTitle(e.target.value)}\r\n                variant=\"filled\"\r\n                />\r\n                 <Grid item md={20}>\r\n                    <FormControl variant=\"filled\" className={classes.formControl}>\r\n                        <InputLabel id=\"demo-simple-select-filled-label\">Choose category </InputLabel>\r\n                        <Select\r\n                        labelId=\"demo-simple-select-filled-label\"\r\n                        id=\"demo-simple-select-filled\"\r\n                        value={category}\r\n                        onChange={handleChange}\r\n                        >\r\n                        <MenuItem value=\"\">\r\n                            <em>None</em>\r\n                        </MenuItem>\r\n                        <MenuItem value={'communication'}>Communication</MenuItem>\r\n                        <MenuItem value={'technical'}>Technical</MenuItem>\r\n                        <MenuItem value={'programming'}>Programming launguage</MenuItem>\r\n                        <MenuItem value={'launguage'}>Lauguage</MenuItem>\r\n                        <MenuItem value={'Managment'}>Managment</MenuItem>\r\n                        </Select>\r\n                        \r\n                    </FormControl>\r\n                    <FormHelperText>*Please choose the appropriate section so the question can be searched easily.</FormHelperText>\r\n                </Grid>\r\n                    <Grid item xs={10}>\r\n                        <FormControl className={classes.formControl} varient = 'filled'>\r\n                        <InputLabel id=\"demo-simple-select-filled-label\">Choose related tags </InputLabel>\r\n                            <Select\r\n                                labelId=\"demo-mutiple-chip-label\"\r\n                                id=\"demo-mutiple-chip\"\r\n                                multiple\r\n                                value={tags}\r\n                                onChange={handleChangeTags}\r\n                                input={<Input id=\"select-multiple-chip\" />}\r\n                                renderValue={(selected) => (\r\n                                    <div className={classes.chips}>\r\n                                    {selected.map((value) => (\r\n                                        <Chip key={value} label={value} className={classes.chip} />\r\n                                    ))}\r\n                                    </div>\r\n                                )}\r\n                                MenuProps={MenuProps}\r\n                                >\r\n                                {names.map((name) => (\r\n                                    <MenuItem key={name} value={name} style={getStyles(name, tags, theme)}>\r\n                                    {name}\r\n                                    </MenuItem>\r\n                            ))}\r\n                                </Select>\r\n                        </FormControl>\r\n                        <FormHelperText>*Please choose suitable Keywords Ex: php,javascript,spoken english..</FormHelperText>\r\n\r\n                    </Grid>\r\n                    <Grid item xs={9}>\r\n                        <input accept=\"image/*\" className={classes.input} id=\"icon-button-file\" type=\"file\" style = {{display:'none'}} onChange ={(e) => setNameFile(e.target.value)}/>\r\n                    <label htmlFor=\"icon-button-file\">\r\n                        <IconButton color=\"primary\" aria-label=\"upload picture\" component=\"span\">\r\n                        <PhotoCamera />\r\n                        </IconButton>\r\n                        <span>{nameFile}</span>\r\n                        <FormHelperText>*Upload any related image to eloborate your question</FormHelperText>\r\n                    </label>\r\n                    </Grid>\r\n                <Grid item xs={12}>\r\n                <FormHelperText>*Please Eloborate your answer here with style</FormHelperText>\r\n                   {/* Rich text editor for asking question */}\r\n                   <Editor apiKey = 'w5gnjxdx9q6zbw5rn4sl66xt7vfchdamfhel8gzrx9qybbg4'\r\n                        id=\"full-featured-premium\"\r\n                          initialValue=\"<p>Enter your answer here....!</p>\"\r\n                          init={{\r\n                          selector: 'textarea#full-featured-non-premium',\r\n                          plugins: 'print preview paste importcss searchreplace autolink autosave save directionality code visualblocks visualchars fullscreen image link media template codesample table charmap hr pagebreak nonbreaking anchor toc insertdatetime advlist lists wordcount imagetools textpattern noneditable help charmap quickbars emoticons',\r\n                          imagetools_cors_hosts: ['picsum.photos'],\r\n                          menubar: 'file edit view insert format tools table help',\r\n                          toolbar: 'undo redo | bold italic underline strikethrough | fontselect fontsizeselect formatselect | alignleft aligncenter alignright alignjustify | outdent indent |  numlist bullist | forecolor backcolor removeformat | pagebreak | charmap emoticons | fullscreen  preview save print | insertfile image media template link anchor codesample | ltr rtl',\r\n                          toolbar_sticky: true,\r\n                          autosave_ask_before_unload: true,\r\n                          autosave_interval: \"30s\",\r\n                          autosave_prefix: \"{path}{query}-{id}-\",\r\n                          autosave_restore_when_empty: false,\r\n                          autosave_retention: \"2m\",\r\n                          image_advtab: true,\r\n                          content_css: '//www.tiny.cloud/css/codepen.min.css',\r\n                          link_list: [\r\n                            { title: 'My page 1', value: 'http://www.tinymce.com' },\r\n                            { title: 'My page 2', value: 'http://www.moxiecode.com' }\r\n                          ],\r\n                          image_list: [\r\n                            { title: 'My page 1', value: 'http://www.tinymce.com' },\r\n                            { title: 'My page 2', value: 'http://www.moxiecode.com' }\r\n                          ],\r\n                          image_class_list: [\r\n                            { title: 'None', value: '' },\r\n                            { title: 'Some class', value: 'class-name' }\r\n                          ],\r\n                          importcss_append: true,\r\n                          file_picker_callback: function (callback, value, meta) {\r\n                            /* Provide file and text for the link dialog */\r\n                            if (meta.filetype === 'file') {\r\n                              callback('https://www.google.com/logos/google.jpg', { text: 'My text' });\r\n                            }\r\n\r\n                            /* Provide image and alt text for the image dialog */\r\n                            if (meta.filetype === 'image') {\r\n                              callback('https://www.google.com/logos/google.jpg', { alt: 'My alt text' });\r\n                            }\r\n\r\n                            /* Provide alternative source and posted for the media dialog */\r\n                            if (meta.filetype === 'media') {\r\n                              callback('movie.mp4', { source2: 'alt.ogg', poster: 'https://www.google.com/logos/google.jpg' });\r\n                            }\r\n                          },\r\n                          templates: [\r\n                                { title: 'New Table', description: 'creates a new table', content: '<div class=\"mceTmpl\"><table width=\"98%%\"  border=\"0\" cellspacing=\"0\" cellpadding=\"0\"><tr><th scope=\"col\"> </th><th scope=\"col\"> </th></tr><tr><td> </td><td> </td></tr></table></div>' },\r\n                            { title: 'Starting my story', description: 'A cure for writers block', content: 'Once upon a time...' },\r\n                            { title: 'New list with dates', description: 'New List with dates', content: '<div class=\"mceTmpl\"><span class=\"cdate\">cdate</span><br /><span class=\"mdate\">mdate</span><h2>My List</h2><ul><li></li><li></li></ul></div>' }\r\n                          ],\r\n                          template_cdate_format: '[Date Created (CDATE): %m/%d/%Y : %H:%M:%S]',\r\n                          template_mdate_format: '[Date Modified (MDATE): %m/%d/%Y : %H:%M:%S]',\r\n                          height: 520,\r\n                          image_caption: true,\r\n                          quickbars_selection_toolbar: 'bold italic | quicklink h2 h3 blockquote quickimage quicktable',\r\n                          noneditable_noneditable_class: \"mceNonEditable\",\r\n                          toolbar_mode: 'sliding',\r\n                          contextmenu: \"link image imagetools table\",\r\n                       }}\r\n                          onChange={handleEditorChange}\r\n                     />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                <FormControlLabel style = {{display:'flex'}}\r\n                    control={<Checkbox value=\"allowExtraEmails\" color=\"primary\" onChange = {(e) => setUpdates(e.target.checked)}/>}\r\n                    label=\"I want to receive updates with regarding to this post via Email\"\r\n                />\r\n                      </Grid>\r\n                    </Grid>\r\n                     </form>\r\n                </div>\r\n                </Container>\r\n            </DialogContent>\r\n       \r\n \r\n          </div>\r\n          <DialogActions>\r\n                    <Button onClick={handleSubmitData} color=\"primary\" variant = 'contained'>\r\n                    Post your question\r\n                    </Button>\r\n                    <Button onClick={handleClose} color=\"secondary\" variant = 'contained'>\r\n                        cancel\r\n                    </Button>\r\n                    </DialogActions>\r\n          </Dialog>\r\n      </div>\r\n    )\r\n}\r\n\r\n\r\n","C:\\Users\\Pranav\\query_hook\\client-side\\src\\components\\ContextApi.js",[],"C:\\Users\\Pranav\\query_hook\\client-side\\src\\components\\RegisterDetails.js",["191","192","193","194","195","196","197","198"],"import React from 'react'\r\nimport logo from '../images/login_main.png'\r\nimport '../componentcss/Login.css';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Input from '@material-ui/core/Input'\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { makeStyles, useTheme }  from '@material-ui/core/styles'\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport Chip from '@material-ui/core/Chip';\r\nimport Select from '@material-ui/core/Select';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport PhotoCamera from '@material-ui/icons/PhotoCamera';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport { Fade } from '@material-ui/core';\r\nimport {Redirect} from 'react-router-dom'\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n      },\r\n    div:{\r\n        borderRadius:'5px',\r\n    },\r\n    formControl: {\r\n        marginTop: theme.spacing(0),\r\n        minWidth: 200\r\n      \r\n      },\r\n      root:{\r\n          minWidth:'25rem',\r\n        \r\n      },avatar: {\r\n        margin: theme.spacing(0),\r\n        backgroundColor: theme.palette.secondary.main,\r\n      },\r\n      form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(1),\r\n      },\r\n}))\r\nfunction getStyles(name, personName, theme) {\r\n    return {\r\n      fontWeight:\r\n        personName.indexOf(name) === -1\r\n          ? theme.typography.fontWeightRegular\r\n          : theme.typography.fontWeightMedium,\r\n    };\r\n  }\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 1;\r\nconst MenuProps = {\r\n  PaperProps: {\r\n    style: {\r\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n      width: 250,\r\n    },\r\n  },\r\n};\r\nconst names = [\r\n    'A.NET',\r\n    'ALGOL ',\r\n    'Arc',\r\n    'AppleScript',\r\n    'Apex',\r\n    'Javascript',\r\n    'php',\r\n    'Node js',\r\n    'web development',\r\n    'Android',\r\n    'App development',\r\n    ''\r\n  ];\r\n  \r\nexport default function RegisterDetails() {\r\n    const theme = useTheme();\r\n    const classes = useStyles();\r\n    const [condition,setCondition] =  React.useState('');\r\n    const [currentWorking,setCurrentWorking] =  React.useState('');\r\n    const [quote,seQuote] =  React.useState('');\r\n    const [openAlert,setAlert] =  React.useState(false);\r\n    const [statement,setStatement] =  React.useState('')\r\n    const [file,setFile] =  React.useState(null)\r\n    const [nameFile,setNameFile] = React.useState([])\r\n    const [tags, setTags] = React.useState([]);\r\n    const handleClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n          return;   \r\n        }\r\n        setAlert(false);\r\n      };\r\n      const handleChangeTags = (event) => {\r\n        setTags(event.target.value);\r\n      };\r\n      const handleUpdateProfile = (event) =>{\r\n        event.preventDefault()\r\n       \r\n        const data = { currentWorking,tags,nameFile,quote }\r\n        if(currentWorking && tags && quote !==\"\"){\r\n        fetch('/updateProfile',{\r\n         method:'POST',\r\n         mode:'no-cors',\r\n         headers:{\r\n           'Content-type':'multipart/form-data',\r\n           'Access-Control-Allow-Origin': '*',\r\n           'Accept':'application/json'\r\n         },\r\n         body:JSON.stringify(data)\r\n        }).then(res => res.json()).then(response =>{\r\n          console.log(response)\r\n        })\r\n      }\r\n      else{\r\n        setAlert(true)\r\n        setCondition(\"error\")\r\n        setStatement(\"Required fields can't be empty\")\r\n      }\r\n      }\r\n      //handle closing snackbars\r\n     \r\n    return (\r\n        <div >\r\n       \r\n       <Snackbar open={openAlert} autoHideDuration={6000} onClose={handleClose}  key={Fade}    anchorOrigin={{\r\n          vertical: 'top',\r\n          horizontal: 'right',\r\n        }}>\r\n        <Alert onClose={handleClose} id = \"alertgreen\" severity = {condition} >\r\n       {statement}\r\n          </Alert>\r\n       \r\n      </Snackbar>\r\n            <Container component=\"main\" maxWidth=\"lg\" >\r\n        <CssBaseline />\r\n        <div  className = {classes.root}>\r\n        {/* <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}  key={Fade}    anchorOrigin={{\r\n          vertical: 'top',\r\n          horizontal: 'right',\r\n        }}>\r\n        <Alert onClose={handleClose} id = \"alertgreen\" severity = {condition} >\r\n       'hello'\r\n          </Alert>\r\n       \r\n      </Snackbar> */}\r\n          \r\n          <Typography component=\"h3\" variant=\"h5\" >\r\n            Provide Your details\r\n          </Typography>\r\n          <FormHelperText>People let know about you </FormHelperText>\r\n\r\n          <form className={classes.form} noValidate enctype=\"multipart/form-data\" >\r\n            <TextField\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              label=\"Your current working\"\r\n              name=\"text\"\r\n              autoFocus\r\n              onChange = {(e)=> setCurrentWorking(e.target.value)}\r\n            /><FormHelperText>*Enter your current working in which field</FormHelperText>\r\n<FormControl className={classes.formControl} varient = 'filled' >\r\n                        <InputLabel id=\"demo-simple-select-filled-label\">Choose related tags </InputLabel>\r\n                            <Select\r\n                                labelId=\"demo-mutiple-chip-label\"\r\n                                id=\"demo-mutiple-chip\"\r\n                                multiple\r\n                                value={tags}\r\n                                 onChange={handleChangeTags}\r\n                                input={<Input id=\"select-multiple-chip\" />}\r\n                                renderValue={(selected) => (\r\n                                    <div className={classes.chips}>\r\n                                    {selected.map((value) => (\r\n                                        <Chip key={value} label={value} className={classes.chip} />\r\n                                    ))}\r\n                                    </div>\r\n                                )}\r\n                                MenuProps={MenuProps}\r\n                                >\r\n                                {names.map((name) => (\r\n                                    <MenuItem key={name} value={name} style={getStyles(name, tags, theme)}>\r\n                                    {name}\r\n                                    </MenuItem>\r\n                            ))}\r\n                                </Select>\r\n                        </FormControl>\r\n                        <FormHelperText>*choose your prefered technology</FormHelperText>\r\n                        <Grid item xs={9}>\r\n                        <input accept=\"image/*\" className={classes.input} id=\"icon-button-file\" type=\"file\" style = {{display:'none'}} onChange ={(e) => {setNameFile(e.target.value); setFile(e.target.value)}} name = \"profile\"/>\r\n                    <label htmlFor=\"icon-button-file\">\r\n                        <IconButton color=\"primary\" aria-label=\"upload picture\" component=\"span\">\r\n                        <PhotoCamera />\r\n                        </IconButton>\r\n                        <span>{nameFile}</span>\r\n                        <FormHelperText>*Upload your profile people let you know</FormHelperText>\r\n                    </label>\r\n                    </Grid>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              name=\"Your favourite quote\"\r\n              label=\"Your favourite quote\"\r\n             onChange = {(e) => seQuote(e.target.value)}\r\n              id=\"password\"\r\n              autoComplete=\"current-password\"\r\n            \r\n            />\r\n                                                <FormHelperText>*Enter your favourite quote all time</FormHelperText>\r\n\r\n            <Button\r\n              type=\"submit\"\r\n              fullWidth\r\n              variant=\"contained\"\r\n              color=\"secondary\"\r\n              className={classes.submit}\r\n              style = {{margin:'10px 0px 10px 0px'}}\r\n              onClick = {handleUpdateProfile}\r\n            >\r\n              Update my profile\r\n            </Button>\r\n            \r\n          </form>\r\n        </div>\r\n        \r\n      </Container>\r\n        \r\n       \r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\Pranav\\query_hook\\client-side\\src\\components\\viewPost.jsx",["199"],"C:\\Users\\Pranav\\query_hook\\client-side\\src\\components\\ViewPost.jsx",["200","201","202","203","204","205","206","207","208","209","210","211","212","213","214"],"import React,{useContext,useState,useEffect, Suspense} from 'react'\r\nimport Navbar from './Navbar'\r\nimport Sidenav from './Sidenav'\r\nimport {makeStyles} from '@material-ui/core/styles'\r\nimport Alert from '../components/AlertBar'\r\nimport {Redirect , Link} from 'react-router-dom'\r\nimport AlertBar from '../components/AlertBar'\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport ViewPostComponent from '../components/ViewPostComponent'\r\nimport ViewPostAns from '../components/ViewPostAnswer'\r\nimport RightSideNav from '../components/RightSideNav'\r\nimport Button from '@material-ui/core/Button'\r\nimport Authapi from './ContextApi';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { Editor } from '@tinymce/tinymce-react';\r\nimport LiveHelpIcon from '@material-ui/icons/LiveHelp';\r\nimport Cookies from 'js-cookie'\r\nconst useStyles = makeStyles((theme) =>({\r\n sidenav:{\r\n        marginTop:'8rem',\r\n        display:'flex',\r\n      \r\n    },\r\n    mainDiv:{\r\n        width:'50%'\r\n    },\r\n    leaveAns:{\r\n        padding:'10px'\r\n    },\r\n    \r\n    \r\n}))\r\nfunction ViewPost() {\r\n    const Auth = useContext(Authapi)\r\n    const [statement,setStatement] = useState('')\r\n    const [type,setType] = useState('')\r\n    const [body,setBody] = useState(\"\")\r\n    const [open, setOpen] = React.useState(false);\r\n    const [dataQns,setDataqns] = useState([])\r\n    const [closeAns, setAns] = React.useState(false);\r\n    const getCookie = Cookies.get('id')\r\n    const [postid,setPostid] = React.useState([]);\r\n    \r\n    let href = window.location.href.split('/')\r\n    const classes = useStyles()\r\n    useEffect(() =>{\r\n      fetch('/getAnswers/'+href[href.length -1]).then(data => data.json()).then((res) =>{\r\n        setDataqns(res)\r\n        setPostid(dataQns.qnsObject)\r\n      })\r\n      \r\n   },[])\r\n  //  updating post views\r\n   useEffect(() =>{\r\n    setTimeout(()=>{\r\n      // fetch('/updateViews',{\r\n      //   mode:'no-cors',\r\n      //   method: 'POST',\r\n      //   headers: {\r\n      //     'Content-Type': 'application/json',\r\n      //     'Accept': 'application/json'\r\n      //   },\r\n      //   body:JSON.stringify(data)\r\n      // })\r\n      console.log(postid)\r\n    },5000)\r\n   },[])\r\n    const handleEditorChange = (e) => {\r\n        setBody(e.target.getContent()) \r\n       }\r\n     \r\n       const handleSubmitData = (e) =>{\r\n       \r\n        const answerBody = {body,getCookie}\r\n       \r\n        fetch('/postAnswer/'+href[href.length -1],{\r\n          mode:'no-cors',\r\n          method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json'\r\n      },\r\n      body:JSON.stringify(answerBody)\r\n        }).then(res => res.json()).then((dat) =>{\r\n          if(dat.success ===200){\r\n           console.log(\"success\")\r\n           setOpen(false)\r\n          }\r\n          else{\r\n            setStatement(\"something went wrong\")\r\n            setType('error')\r\n          }\r\n        })\r\n       }\r\n       \r\n        const handleClickOpen = () => {\r\n        setOpen(true)\r\n         \r\n        };\r\n        const handleClose = () => {\r\n            setOpen(false);\r\n          };\r\n    return (\r\n        <div className = {classes.viewPost_parent} >\r\n                  \r\n                <Navbar />\r\n                <div className = {classes.sidenav}>\r\n                <Sidenav />\r\n              \r\n            <span className = {classes.mainDiv}>\r\n            \r\n            <ViewPostComponent value = {dataQns}/>\r\n        \r\n           \r\n                {/* <div>\r\n                    <h2>Answers for above questions</h2>\r\n                </div> */}\r\n                <div className = {classes.viewAns} >\r\n                <ViewPostAns value = {dataQns} />\r\n                </div>\r\n                <div className = {classes.leaveAns}>\r\n                <Authapi.Consumer>\r\n                    {\r\n                        ({Auth}) =>{\r\n                        if(Auth){\r\n                            return (\r\n               \r\n                                <Button\r\n                                fullWidth\r\n                                className = {classes.button}\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                className = {classes.button}\r\n                                onClick={handleClickOpen}\r\n                                >Leave an answer</Button>\r\n                                )\r\n                        }\r\n                        else{\r\n                            return ( <Link to = '/login'><Button\r\n                                fullWidth\r\n                                className = {classes.button}\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                            className = {classes.button}\r\n                                >Leave an answer</Button></Link>)\r\n                        }\r\n                    }\r\n                    }\r\n                </Authapi.Consumer>\r\n                <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\" fullWidth= 'true'\r\n                maxWidth= 'md'> \r\n                           <DialogTitle id=\"form-dialog-title\" style = {{color:'#023e8a'}} ><LiveHelpIcon className = {classes.askDoubt} />Type your answer.....!</DialogTitle>\r\n                           <DialogContent >\r\n                           <FormHelperText>*Please Eloborate your answer here with style</FormHelperText>\r\n                           <Editor apiKey = 'w5gnjxdx9q6zbw5rn4sl66xt7vfchdamfhel8gzrx9qybbg4'\r\n                        id=\"full-featured-premium\"\r\n                          initialValue=\"<p>Enter your answer here....!</p>\"\r\n                          init={{\r\n                          selector: 'textarea#full-featured-non-premium',\r\n                          plugins: 'print preview paste importcss searchreplace autolink autosave save directionality code visualblocks visualchars fullscreen image link media template codesample table charmap hr pagebreak nonbreaking anchor toc insertdatetime advlist lists wordcount imagetools textpattern noneditable help charmap quickbars emoticons',\r\n                          imagetools_cors_hosts: ['picsum.photos'],\r\n                          menubar: 'file edit view insert format tools table help',\r\n                          toolbar: 'undo redo | bold italic underline strikethrough | fontselect fontsizeselect formatselect | alignleft aligncenter alignright alignjustify | outdent indent |  numlist bullist | forecolor backcolor removeformat | pagebreak | charmap emoticons | fullscreen  preview save print | insertfile image media template link anchor codesample | ltr rtl',\r\n                          toolbar_sticky: true,\r\n                          autosave_ask_before_unload: true,\r\n                          autosave_interval: \"30s\",\r\n                          autosave_prefix: \"{path}{query}-{id}-\",\r\n                          autosave_restore_when_empty: false,\r\n                          autosave_retention: \"2m\",\r\n                          image_advtab: true,\r\n                          content_css: '//www.tiny.cloud/css/codepen.min.css',\r\n                          link_list: [\r\n                            { title: 'My page 1', value: 'http://www.tinymce.com' },\r\n                            { title: 'My page 2', value: 'http://www.moxiecode.com' }\r\n                          ],\r\n                          image_list: [\r\n                            { title: 'My page 1', value: 'http://www.tinymce.com' },\r\n                            { title: 'My page 2', value: 'http://www.moxiecode.com' }\r\n                          ],\r\n                          image_class_list: [\r\n                            { title: 'None', value: '' },\r\n                            { title: 'Some class', value: 'class-name' }\r\n                          ],\r\n                          importcss_append: true,\r\n                          file_picker_callback: function (callback, value, meta) {\r\n                            /* Provide file and text for the link dialog */\r\n                            if (meta.filetype === 'file') {\r\n                              callback('https://www.google.com/logos/google.jpg', { text: 'My text' });\r\n                            }\r\n\r\n                            /* Provide image and alt text for the image dialog */\r\n                            if (meta.filetype === 'image') {\r\n                              callback('https://www.google.com/logos/google.jpg', { alt: 'My alt text' });\r\n                            }\r\n\r\n                            /* Provide alternative source and posted for the media dialog */\r\n                            if (meta.filetype === 'media') {\r\n                              callback('movie.mp4', { source2: 'alt.ogg', poster: 'https://www.google.com/logos/google.jpg' });\r\n                            }\r\n                          },\r\n                          templates: [\r\n                                { title: 'New Table', description: 'creates a new table', content: '<div class=\"mceTmpl\"><table width=\"98%%\"  border=\"0\" cellspacing=\"0\" cellpadding=\"0\"><tr><th scope=\"col\"> </th><th scope=\"col\"> </th></tr><tr><td> </td><td> </td></tr></table></div>' },\r\n                            { title: 'Starting my story', description: 'A cure for writers block', content: 'Once upon a time...' },\r\n                            { title: 'New list with dates', description: 'New List with dates', content: '<div class=\"mceTmpl\"><span class=\"cdate\">cdate</span><br /><span class=\"mdate\">mdate</span><h2>My List</h2><ul><li></li><li></li></ul></div>' }\r\n                          ],\r\n                          template_cdate_format: '[Date Created (CDATE): %m/%d/%Y : %H:%M:%S]',\r\n                          template_mdate_format: '[Date Modified (MDATE): %m/%d/%Y : %H:%M:%S]',\r\n                          height: 520,\r\n                          image_caption: true,\r\n                          quickbars_selection_toolbar: 'bold italic | quicklink h2 h3 blockquote quickimage quicktable',\r\n                          noneditable_noneditable_class: \"mceNonEditable\",\r\n                          toolbar_mode: 'sliding',\r\n                          contextmenu: \"link image imagetools table\",\r\n                       }}\r\n                          onChange={handleEditorChange}\r\n                     />\r\n                           </DialogContent>\r\n                           <DialogActions>\r\n                    <Button onClick={handleSubmitData} color=\"primary\" variant = 'contained' type=\"submit\">\r\n                    Post your answer\r\n                    </Button>\r\n                    <Button onClick={handleClose} color=\"secondary\" variant = 'contained'>\r\n                        cancel\r\n                    </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n                </div>\r\n            </span>\r\n                </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ViewPost\r\n","C:\\Users\\Pranav\\query_hook\\client-side\\src\\components\\AlertBar.jsx",["215","216"],"import React from 'react'\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport { Fade } from '@material-ui/core';\r\n\r\nfunction Alert(props) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n  }\r\nfunction AlertBar({state,type}) {\r\n    const [statement,setStatement] = React.useState('')\r\n    const [condition,setCondition] = React.useState('')\r\n    const [open,setOpen] = React.useState(true)\r\n    if(state !==''){\r\n        setStatement(state)\r\n        setOpen(true)\r\n        setCondition(type)\r\n    }\r\n    const handleClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n          return;\r\n        }\r\n        setOpen(false);\r\n      };\r\n    return (\r\n       \r\n           <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}  key={Fade}    anchorOrigin={{\r\n          vertical: 'top',\r\n          horizontal: 'right',\r\n        }}>\r\n        <Alert onClose={handleClose} id = \"alertgreen\" severity = 'error' >\r\n      {state}\r\n          </Alert>\r\n       \r\n      </Snackbar>  \r\n       \r\n    )\r\n}\r\n\r\nexport default AlertBar\r\n","C:\\Users\\Pranav\\query_hook\\client-side\\src\\components\\ViewPostComponent.jsx",["217","218","219","220","221","222","223","224","225"],"import React,{useState} from 'react'\r\nimport {makeStyles} from '@material-ui/core/styles'\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport ArrowDropDownTwoToneIcon from '@material-ui/icons/ArrowDropDownTwoTone';\r\nimport ArrowDropUpTwoToneIcon from '@material-ui/icons/ArrowDropUpTwoTone';\r\nimport LocalOfferTwoToneIcon from '@material-ui/icons/LocalOfferTwoTone';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport QuestionAnswerIcon from '@material-ui/icons/QuestionAnswer';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport Logo from '../images/action.png'\r\nimport { BodyData }  from './HomeDataContainer'\r\nimport Truncate from 'react-truncate'\r\nimport ReactHtmlParser from 'react-html-parser'\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Async from 'react-async';\r\n\r\nconst useStyles = makeStyles((theme) =>({\r\n    small: {\r\n        width: theme.spacing(3.5),\r\n        height: theme.spacing(3.5),\r\n      },\r\n      homeRecentQns:{\r\n        backgroundColor:'white',\r\n      },\r\n    homeRecentQnsParent:{\r\n        display:'flex',\r\n      \r\n       marginBottom:'2px',\r\n       paddingTop:'2rem',\r\n       paddingBottom:'1rem'\r\n        \r\n    },\r\n    avatar_parent:{\r\n        display:'flex',\r\n        flexDirection:'column',\r\n        alignItems:'center',\r\n    },\r\n    avatar:{\r\n        border:'2px solid blue',\r\n        borderRadius:'50%',\r\n        padding:'3px'\r\n    },\r\n    voted_parent:{\r\n        textAlign:'center',\r\n        display:'flex',\r\n        flexDirection:'column',\r\n        justifyContent:'space-evenly',\r\n        margin:theme.spacing(2,0),\r\n        fontSize:'18px',\r\n        fontWeight:'800',\r\n        color:'#565264'\r\n    },\r\n    voted_up:{\r\n        fontSize:'50px !important',\r\n        color:'#997b66',\r\n        '&:hover':{\r\n            cursor:'pointer',\r\n            color:'#f68e5f'\r\n        }\r\n    },\r\n    voted_down:{\r\n        fontSize:'50px !important',\r\n        '&:hover':{\r\n            cursor:'pointer',\r\n            color:'#f68e5f'\r\n        }\r\n    },\r\n    recentQns_parent:{\r\n        margin:'0rem 1rem 1rem 1rem',\r\n        marginBottom:'2rem',\r\n    },\r\n    recentQns_tags_parent:{\r\n        padding:'5px',\r\n        display:'flex',\r\n        margin:'-1rem 1rem .5rem 0rem',\r\n    },\r\n    recentQns_name:{\r\n         fontSize:'17px',\r\n         color:'blue',\r\n         fontWeight:'900',\r\n         textTransform:'capitalize'\r\n    },\r\n    recentQns_occupation:{\r\n        alignSelf:'center',\r\n        marginLeft:'0.5rem',\r\n        fontSize:'11px',\r\n        textAlign:'center',\r\n        padding:'2px 4px 2px 4px',\r\n        backgroundColor:'#e09f3e',\r\n        color:'white',\r\n        fontWeight:'800'\r\n    },\r\n    recentQns_askedIn:{\r\n        alignSelf:'center',\r\n        marginLeft:'1rem',\r\n        fontSize:'14px',\r\n        fontWeight:'600',\r\n        color:'grey'\r\n    },\r\n    recentQns_askedIn_bold:{\r\n        color:'#9e2a2b',\r\n        fontWeight:'800',\r\n        marginRight:'3px'  \r\n    },\r\n    recentQns_title:{\r\n        marginTop:'-1rem',\r\n        padding:'3px',\r\n        fontSize:'20px',\r\n        fontWeight:'800'\r\n    },\r\n    recentQns_answers:{\r\n        padding:'3px',\r\n        fontSize:'16px',\r\n        lineHeight:'35px'\r\n    },\r\n    recentQns_topic_tags:{\r\n      padding:'1.5rem 1rem 1rem 0rem'\r\n    },\r\n    chip:{\r\n        marginLeft:'1rem'\r\n    },\r\n    recentQns_views_parent:{\r\n        display:'flex',\r\n        \r\n        padding:'1rem 1rem 1rem 0rem',\r\n        backgroundColor:'#d8f3dc'\r\n    },\r\n    popular_desc_view:{\r\n        display:'flex',\r\n      justifyContent:'center',\r\n      alignSelf:'center',\r\n      alignItems:'center',\r\n        marginLeft:'1rem',\r\n        border:'#f9844a solid 1px',\r\n        padding:'5px',\r\n        fontSize:'14px',\r\n       \r\n    },\r\n    views_icon:{\r\n        fontSize:'20px',\r\n         marginRight:'0.5rem'\r\n    }\r\n\r\n}))\r\nexport default function ViewPostComponent(props) {\r\n    const classes = useStyles()\r\n    \r\n    const {qnsObject} = props.value\r\n    const {answersList} = props.value\r\n    const [postid,setPostid] = React.useState(0);\r\n    let count = 0;\r\n   const handleViews = (views,postid) =>{\r\n     count+=1;\r\n     if(count == 1){\r\n       const data = {views:views+1,e:postid}\r\n       setTimeout(()=>{\r\n          \r\n        fetch('/updateViews',{\r\n            mode:'no-cors',\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              'Accept': 'application/json'\r\n            },\r\n            body:JSON.stringify(data)\r\n          })\r\n        \r\n       },5000)\r\n    }\r\n   }\r\n    return (\r\n        <Async >\r\n        {({ data, err, isLoading }) =>\r\n        {\r\n            if (isLoading) return \"Loading...\"\r\n        if (err) return `Something went wrong: ${err.message}`\r\n        if (qnsObject){\r\n            setPostid(qnsObject[0].postid)\r\n            if(count ==0){\r\n                handleViews(qnsObject[0].views,qnsObject[0].postid)\r\n            }            \r\n        return(\r\n            qnsObject.map((content,index) =>{\r\n            let count = content.tags.split(',')\r\n            return (\r\n                <div className = {classes.homeRecentQns} >\r\n                <div className ={classes.homeRecentQnsParent}>\r\n                    <div className = {classes.avatar_parent}>\r\n                     <div className ={classes.avatar}>\r\n                        <Avatar alt='tfds' src ={\"\"} style  = {{backgroundColor:content.profile_img}}className = {classes.small}>{content.firstName[0].toUpperCase()}</Avatar>\r\n                     </div>\r\n                     <div className ={classes.voted_parent}>\r\n                         <ArrowDropUpTwoToneIcon className = {classes.voted_up}/>\r\n                         <p>{content.postLike}</p>\r\n                        <ArrowDropDownTwoToneIcon className ={classes.voted_down}/>\r\n                     </div>\r\n                    </div>\r\n                    <div className ={classes.recentQns_parent}>\r\n                        <div className = {classes.recentQns_tags_parent}>\r\n                          <p className = {classes.recentQns_name}>{content.firstName} {content.lastName}</p>\r\n                          <p className = {classes.recentQns_occupation}>{content.currentWorking}</p>\r\n                          <p className = {classes.recentQns_askedIn}><b className = {classes.recentQns_askedIn_bold}>Asked in:</b>{content.posted_date}</p>\r\n                        </div>\r\n                        <div className ={classes.recentQns_desc}>\r\n                            <p className ={classes.recentQns_title}>{content.qnsTitle}</p>\r\n                            <p className ={classes.recentQns_answers}>\r\n                            {ReactHtmlParser(content.Question_body)}\r\n                           </p>\r\n                        </div>\r\n                        <div className ={classes.recentQns_topic_tags}>\r\n                        {content.tags.split(',').map(chip =>{\r\n                           return <> <Chip   label={chip} variant=\"filled\" color=\"primary\" size=\"small\" icon={<LocalOfferTwoToneIcon />} /></>\r\n                        })}                                               \r\n                        </div>\r\n                        <div className ={classes.recentQns_views_parent}>\r\n                                <div className = {classes.popular_desc_view}>\r\n                                    <QuestionAnswerIcon className = {classes.views_icon}/>\r\n                                    <div className = {classes.p}>{answersList.length} Answers</div>\r\n                                </div>\r\n                                <div className = {classes.popular_desc_view}>\r\n                                    <VisibilityIcon className = {classes.views_icon}/>\r\n                                    <div className = {classes.p}>{content.views} views</div>\r\n                                </div>\r\n                        </div>\r\n                        \r\n                    </div>\r\n                     \r\n                </div>\r\n                \r\n            </div>\r\n            )\r\n            })\r\n        \r\n        )\r\n         \r\n        }\r\n       \r\n         }\r\n        }\r\n        </Async>\r\n           ) \r\n    \r\n        }\r\n        \r\n    \r\n","C:\\Users\\Pranav\\query_hook\\client-side\\src\\components\\ViewPostAnswer.jsx",["226","227","228","229","230","231","232","233","234","235"],"import React,{useEffect,useState} from 'react'\r\nimport {makeStyles} from '@material-ui/core/styles'\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport ArrowDropDownTwoToneIcon from '@material-ui/icons/ArrowDropDownTwoTone';\r\nimport ArrowDropUpTwoToneIcon from '@material-ui/icons/ArrowDropUpTwoTone';\r\nimport LocalOfferTwoToneIcon from '@material-ui/icons/LocalOfferTwoTone';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport QuestionAnswerIcon from '@material-ui/icons/QuestionAnswer';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport { Fade } from '@material-ui/core';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Logo from '../images/action.png'\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport ViewPostComponent from '../components/ViewPostComponent'\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { Editor } from '@tinymce/tinymce-react';\r\nimport ReactHtmlParser from 'react-html-parser'\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ShareIcon from '@material-ui/icons/Share';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Cookies, { get } from 'js-cookie'\r\nimport Button from '@material-ui/core/Button'\r\nimport LiveHelpIcon from '@material-ui/icons/LiveHelp';\r\nimport Async from 'react-async';\r\nconst useStyles = makeStyles((theme) =>({\r\n    small: {\r\n        width: theme.spacing(3.5),\r\n        height: theme.spacing(3.5),\r\n      },\r\n    homeRecentQnsParent:{\r\n        display:'flex',\r\n       backgroundColor:'white',\r\n       marginBottom:'2px',\r\n       paddingTop:'2rem'\r\n        \r\n    },\r\n    main_parent:{\r\n      marginTop:\"1rem\"\r\n    },\r\n    avatar_parent:{\r\n        display:'flex',\r\n        flexDirection:'column',\r\n        alignItems:'center',\r\n        marginLeft:'1rem',\r\n        \r\n        \r\n    },\r\n    avatar:{\r\n        border:'2px solid blue',\r\n        borderRadius:'50%',\r\n        padding:'3px'\r\n    },\r\n    voted_parent:{\r\n        textAlign:'center',\r\n        display:'flex',\r\n      justifyContent:'center',\r\n      alignItems:'center',\r\n        margin:theme.spacing(2,0),\r\n        fontSize:'18px',\r\n        fontWeight:'800',\r\n        color:'#565264'\r\n    },\r\n    voted_up:{\r\n        fontSize:'50px !important',\r\n        color:'#997b66',\r\n        '&:hover':{\r\n            cursor:'pointer',\r\n            color:'#f68e5f'\r\n        }\r\n    },\r\n    voted_down:{\r\n        color:'#997b66',\r\n        fontSize:'50px !important',\r\n        '&:hover':{\r\n            cursor:'pointer',\r\n            color:'#f68e5f'\r\n        }\r\n    },\r\n    recentQns_parent:{\r\n        margin:'0rem 1rem 1rem 1rem',\r\n        marginBottom:'2rem',\r\n    },\r\n    recentQns_tags_parent:{\r\n        padding:'5px',\r\n        display:'flex',\r\n        margin:'-1rem 1rem .5rem 0rem',\r\n    },\r\n    recentQns_name:{\r\n        fontSize:'17px',\r\n         color:'blue',\r\n         fontWeight:'900',\r\n         textTransform:'capitalize'\r\n    },\r\n    recentQns_occupation:{\r\n        alignSelf:'center',\r\n        marginLeft:'0.5rem',\r\n        fontSize:'11px',\r\n        textAlign:'center',\r\n        padding:'2px 4px 2px 4px',\r\n        backgroundColor:'#e09f3e',\r\n        color:'white',\r\n        fontWeight:'800'\r\n    },\r\n    recentQns_askedIn:{\r\n        alignSelf:'center',\r\n       \r\n        fontSize:'15px',\r\n        fontWeight:'600',\r\n        color:'grey'\r\n    },\r\n    recentQns_askedIn_bold:{\r\n        color:'#9e2a2b',\r\n        fontWeight:'800',\r\n        marginRight:'3px'  \r\n    },\r\n    recentQns_title:{\r\n        marginTop:'-1rem',\r\n        padding:'3px',\r\n        fontSize:'20px',\r\n        fontWeight:'800'\r\n    },\r\n    recentQns_answers:{\r\n        padding:'3px',\r\n        fontSize:'16px',\r\n        lineHeight:'35px'\r\n    },\r\n    recentQns_topic_tags:{\r\n      padding:'1.5rem 1rem 1rem 0rem'\r\n    },\r\n    chip:{\r\n        marginLeft:'1rem'\r\n    },\r\n    recentQns_views_parent:{\r\n        display:'flex',\r\n        \r\n       \r\n    },\r\n    \r\n    views_icon:{\r\n        fontSize:'20px',\r\n         marginRight:'0.5rem'\r\n    },\r\n    share:{\r\n        display:'flex',\r\n        justifyContent:'center',\r\n        alignSelf:'center',\r\n        color:'#997b66',\r\n        marginLeft:'1rem',\r\n        '&:hover':{\r\n            cursor:'pointer',\r\n            color:'#f68e5f'\r\n        },\r\n        \r\n    },\r\n    type:{\r\n        fontSize:'17px !important',\r\n        marginLeft:\"5px\"\r\n    },\r\n    options:{\r\n        display:'inherit',\r\n        justifyContent:'space-evenly',\r\n        alignItems:'center',\r\n        marginLeft:'50%',\r\n        color:'#184d47'\r\n        \r\n    },\r\n    edit:{\r\n        paddingRight:'2rem'\r\n    },\r\n    \r\n\r\n}))\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\nfunction ViewPostAnswer(props) {\r\n    const classes = useStyles()\r\n    const [body,setBody] = useState('')\r\n    const [id,setId] = useState('')\r\n    const [open, setOpen] = React.useState(false);\r\n    const [initialValue,setvalue] = useState('')\r\n    const userDetail = Cookies.get('id')\r\n    const [statement,setStatement] = React.useState('')\r\n    const [condition,setCondition] = React.useState('')\r\n    const [openAlert,setOpenAlert] = React.useState(false)\r\n    let href = window.location.href.split('/')\r\n    const [answers,setAnswers] = useState([])\r\n    const handleEditorChange = (e) => {\r\n        setBody(e.target.getContent()) \r\n       }\r\n     \r\n    const handleEdit = (e,value) =>{\r\n        console.log(e)\r\n        setvalue(value)\r\n        setOpen(true)\r\n        setId(e)\r\n        \r\n        \r\n    }\r\n    //alerts\r\n    const handleCloseAlert = (event, reason) => {\r\n      if (reason === 'clickaway') {\r\n        return;\r\n      }\r\n  \r\n      setOpenAlert(false);\r\n    };\r\n    const handleDelete = (e) =>{\r\n        const data = {e}\r\n        fetch('/deleteAnswer',{\r\n            mode:'no-cors',\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              'Accept': 'application/json'\r\n            },\r\n            body:JSON.stringify(data)\r\n          }).then(res => res.json()).then(responce => console.log(responce))\r\n    }\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n      };\r\n    const handleUpdate = (e) =>{\r\n        const data = {body,id}\r\n        fetch('/updateAnswer',{\r\n            mode:'no-cors',\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              'Accept': 'application/json'\r\n            },\r\n            body:JSON.stringify(data)\r\n          }).then(res => res.json()).then(response => {\r\n              console.log(response)\r\n          })\r\n    }\r\n    //handle ratings\r\n    const handleLike = (id,likes) =>{\r\n      const data = {id,likes}\r\n\r\n     fetch('/ansLike',{\r\n         mode:'no-cors',\r\n         method: 'POST',\r\n         headers: {\r\n           'Content-Type': 'application/json',\r\n           'Accept': 'application/json'\r\n         },\r\n         body:JSON.stringify(data)\r\n       }).then(res => res.json()).then(responce =>{console.log(responce)})\r\n  }\r\n  //handline share of post and answers\r\n    const handleShare = (id,likes) =>{\r\n      setStatement(\"URL is copied to clipboard you can share with your friends\")\r\n      setCondition('success');\r\n      setOpenAlert(true)\r\n      const data = {id,likes}\r\n      var tempInput = document.createElement(\"input\");\r\n      tempInput.value = window.location.href;\r\n      document.body.appendChild(tempInput);\r\n      tempInput.select();\r\n      document.execCommand(\"copy\");\r\n      document.body.removeChild(tempInput);\r\n     fetch('/ansSharing',{\r\n         mode:'no-cors',\r\n         method: 'POST',\r\n         headers: {\r\n           'Content-Type': 'application/json',\r\n           'Accept': 'application/json'\r\n         },\r\n         body:JSON.stringify(data)\r\n       }).then(res => res.json()).then(responce =>{console.log(responce)})\r\n  }\r\n    useEffect(() =>{\r\n    async function Get(){\r\n        \r\n            fetch('/getAnswersOnly/'+href[href.length -1]).then(async data => await data.json()).then(result =>{ setAnswers(result)\r\n         \r\n                return answers\r\n               }).catch(err => {                \r\n                   \r\n               })\r\n    }\r\n    Get()\r\n    } ,[answers])\r\n    \r\n    return (\r\n    <>\r\n    <Snackbar open={openAlert} autoHideDuration={6000} onClose={handleCloseAlert}  key={Fade}    anchorOrigin={{\r\n          vertical: 'top',\r\n          horizontal: 'right',\r\n        }}>\r\n        <Alert onClose={handleCloseAlert} id = \"alertgreen\" severity = {condition} >\r\n       {statement}\r\n          </Alert>\r\n       \r\n      </Snackbar>\r\n     <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\" fullWidth= 'true'\r\n                maxWidth= 'md'> \r\n                           <DialogTitle id=\"form-dialog-title\" style = {{color:'#023e8a'}} ><LiveHelpIcon className = {classes.askDoubt} />Type your answer.....!</DialogTitle>\r\n                           <DialogContent >\r\n                           <FormHelperText>*Please Eloborate your answer here with style</FormHelperText>\r\n                           <Editor apiKey = 'w5gnjxdx9q6zbw5rn4sl66xt7vfchdamfhel8gzrx9qybbg4'\r\n                        id=\"full-featured-premium\"\r\n                          initialValue={initialValue}\r\n                          init={{\r\n                          selector: 'textarea#full-featured-non-premium',\r\n                          plugins: 'print preview paste importcss searchreplace autolink autosave save directionality code visualblocks visualchars fullscreen image link media template codesample table charmap hr pagebreak nonbreaking anchor toc insertdatetime advlist lists wordcount imagetools textpattern noneditable help charmap quickbars emoticons',\r\n                          imagetools_cors_hosts: ['picsum.photos'],\r\n                          menubar: 'file edit view insert format tools table help',\r\n                          toolbar: 'undo redo | bold italic underline strikethrough | fontselect fontsizeselect formatselect | alignleft aligncenter alignright alignjustify | outdent indent |  numlist bullist | forecolor backcolor removeformat | pagebreak | charmap emoticons | fullscreen  preview save print | insertfile image media template link anchor codesample | ltr rtl',\r\n                          toolbar_sticky: true,\r\n                          autosave_ask_before_unload: true,\r\n                          autosave_interval: \"30s\",\r\n                          autosave_prefix: \"{path}{query}-{id}-\",\r\n                          autosave_restore_when_empty: false,\r\n                          autosave_retention: \"2m\",\r\n                          image_advtab: true,\r\n                          content_css: '//www.tiny.cloud/css/codepen.min.css',\r\n                          link_list: [\r\n                            { title: 'My page 1', value: 'http://www.tinymce.com' },\r\n                            { title: 'My page 2', value: 'http://www.moxiecode.com' }\r\n                          ],\r\n                          image_list: [\r\n                            { title: 'My page 1', value: 'http://www.tinymce.com' },\r\n                            { title: 'My page 2', value: 'http://www.moxiecode.com' }\r\n                          ],\r\n                          image_class_list: [\r\n                            { title: 'None', value: '' },\r\n                            { title: 'Some class', value: 'class-name' }\r\n                          ],\r\n                          importcss_append: true,\r\n                          file_picker_callback: function (callback, value, meta) {\r\n                            /* Provide file and text for the link dialog */\r\n                            if (meta.filetype === 'file') {\r\n                              callback('https://www.google.com/logos/google.jpg', { text: 'My text' });\r\n                            }\r\n\r\n                            /* Provide image and alt text for the image dialog */\r\n                            if (meta.filetype === 'image') {\r\n                              callback('https://www.google.com/logos/google.jpg', { alt: 'My alt text' });\r\n                            }\r\n\r\n                            /* Provide alternative source and posted for the media dialog */\r\n                            if (meta.filetype === 'media') {\r\n                              callback('movie.mp4', { source2: 'alt.ogg', poster: 'https://www.google.com/logos/google.jpg' });\r\n                            }\r\n                          },\r\n                          templates: [\r\n                                { title: 'New Table', description: 'creates a new table', content: '<div class=\"mceTmpl\"><table width=\"98%%\"  border=\"0\" cellspacing=\"0\" cellpadding=\"0\"><tr><th scope=\"col\"> </th><th scope=\"col\"> </th></tr><tr><td> </td><td> </td></tr></table></div>' },\r\n                            { title: 'Starting my story', description: 'A cure for writers block', content: 'Once upon a time...' },\r\n                            { title: 'New list with dates', description: 'New List with dates', content: '<div class=\"mceTmpl\"><span class=\"cdate\">cdate</span><br /><span class=\"mdate\">mdate</span><h2>My List</h2><ul><li></li><li></li></ul></div>' }\r\n                          ],\r\n                          template_cdate_format: '[Date Created (CDATE): %m/%d/%Y : %H:%M:%S]',\r\n                          template_mdate_format: '[Date Modified (MDATE): %m/%d/%Y : %H:%M:%S]',\r\n                          height: 520,\r\n                          image_caption: true,\r\n                          quickbars_selection_toolbar: 'bold italic | quicklink h2 h3 blockquote quickimage quicktable',\r\n                          noneditable_noneditable_class: \"mceNonEditable\",\r\n                          toolbar_mode: 'sliding',\r\n                          contextmenu: \"link image imagetools table\",\r\n                       }}\r\n                          onChange={handleEditorChange}\r\n                     />\r\n                           </DialogContent>\r\n                           <DialogActions>\r\n                    <Button onClick={handleUpdate} color=\"primary\" variant = 'contained' type=\"submit\">\r\n                    Post your answer\r\n                    </Button>\r\n                    <Button onClick={handleClose} color=\"secondary\" variant = 'contained'>\r\n                        cancel\r\n                    </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n      <Async >\r\n      {({ data, err, isLoading }) =>\r\n      {\r\n        if (isLoading) return \"Loading...\"\r\n        if (err) return `Something went wrong: ${err.message}`\r\n        if (answers.result)\r\n        return(\r\n            \r\n       answers.result.map((content,index) =>{\r\n          return(\r\n            <div className = {classes.main_parent}>\r\n             <div className ={classes.homeRecentQnsParent} key = {content.id}>\r\n                <div className = {classes.avatar_parent}>\r\n                 <div className ={classes.avatar}>\r\n                    <Avatar alt='t' src ='' style  = {{backgroundColor:content.profile_img}} className = {classes.small}>{content.firstName[0].toUpperCase()}</Avatar>\r\n                 </div>\r\n                \r\n                </div>\r\n                <div className ={classes.recentQns_parent}>\r\n                    <div className = {classes.recentQns_tags_parent}>\r\n                      <p className = {classes.recentQns_name}>{content.firstName} {content.lastName}</p>\r\n                      <p className = {classes.recentQns_occupation}>{content.currentWorking}</p>\r\n                    </div>\r\n                    <p className = {classes.recentQns_askedIn}><b className = {classes.recentQns_askedIn_bold}>Added an answer on:</b>{content.ans_date}</p>\r\n                    <div className ={classes.recentQns_desc}>\r\n                        <p className ={classes.recentQns_answers}>\r\n                        {ReactHtmlParser(content.answer_body)}\r\n            </p>\r\n                    </div>\r\n                    \r\n                    <div className ={classes.recentQns_views_parent}>\r\n                    <div className ={classes.voted_parent}>\r\n                     <ArrowDropUpTwoToneIcon className = {classes.voted_up} onClick = {() => handleLike(content.answerid,content.ans_rating+1)}/>\r\n                     <p>{content.ans_rating}</p>\r\n                    <ArrowDropDownTwoToneIcon className ={classes.voted_down} onClick = {() => handleLike(content.postid,content.ans_rating-1)}/>\r\n                 </div>\r\n                    <div className ={classes.share} onClick = {() => handleShare(content.answerid,content.ans_share+1)}>\r\n                     <ShareIcon />\r\n                     <p className ={classes.type}>Share</p>\r\n                 </div>\r\n                 <div className = {classes.options}>\r\n                 {\r\n                     content.userid == userDetail ? <><span className ={classes.edit} onClick = {() => handleEdit(content.answerid,content.answer_body)}>\r\n                 <IconButton aria-label=\"delete\"  color=\"primary\">\r\n                 <EditIcon />\r\n                 </IconButton>\r\n                 </span>\r\n                     <span className ={classes.delete} onClick = {() => handleDelete(content.answerid)} >\r\n                     <IconButton aria-label=\"delete\" color=\"secondary\">\r\n                     <DeleteIcon />\r\n                     </IconButton>\r\n                     </span></>:null\r\n                 }\r\n                 </div>\r\n                    </div>\r\n                    \r\n                </div>\r\n                 \r\n            </div>\r\n        </div>\r\n          )\r\n        })\r\n        )\r\n      }\r\n      }\r\n      \r\n      </Async>\r\n      </>\r\n    )\r\n\r\n}\r\n\r\nexport default ViewPostAnswer\r\n","C:\\Users\\Pranav\\query_hook\\client-side\\src\\components\\MostViewed.jsx",["236","237","238","239","240"],"import React,{useState,useEffect} from 'react'\r\nimport {makeStyles} from '@material-ui/core/styles'\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport ArrowDropDownTwoToneIcon from '@material-ui/icons/ArrowDropDownTwoTone';\r\nimport ArrowDropUpTwoToneIcon from '@material-ui/icons/ArrowDropUpTwoTone';\r\nimport LocalOfferTwoToneIcon from '@material-ui/icons/LocalOfferTwoTone';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport QuestionAnswerIcon from '@material-ui/icons/QuestionAnswer';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport Logo from '../images/action.png'\r\nimport { BodyData }  from '../components/HomeDataContainer'\r\nimport Truncate from 'react-truncate'\r\nimport ReactHtmlParser from 'react-html-parser'\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\nconst useStyles = makeStyles((theme) =>({\r\n    small: {\r\n        width: theme.spacing(3.5),\r\n        height: theme.spacing(3.5),\r\n      },\r\n    homeRecentQnsParent:{\r\n        display:'flex',\r\n       backgroundColor:'white',\r\n       marginBottom:'2px'\r\n        \r\n    },\r\n    avatar_parent:{\r\n        display:'flex',\r\n        flexDirection:'column',\r\n        alignItems:'center',\r\n        \r\n    },\r\n    avatar:{\r\n        border:'2px solid blue',\r\n        borderRadius:'50%',\r\n        padding:'3px'\r\n    },\r\n    voted_parent:{\r\n        textAlign:'center',\r\n        display:'flex',\r\n        flexDirection:'column',\r\n        justifyContent:'space-evenly',\r\n        margin:theme.spacing(2,0),\r\n        fontSize:'18px',\r\n        fontWeight:'800',\r\n        color:'#565264'\r\n    },\r\n    voted_up:{\r\n        fontSize:'50px !important',\r\n        color:'#997b66',\r\n        '&:hover':{\r\n            cursor:'pointer',\r\n            color:'#f68e5f'\r\n        }\r\n    },\r\n    voted_down:{\r\n        fontSize:'50px !important',\r\n        '&:hover':{\r\n            cursor:'pointer',\r\n            color:'#f68e5f'\r\n        }\r\n    },\r\n    recentQns_parent:{\r\n        margin:'0rem 1rem 1rem 1rem',\r\n        marginBottom:'2rem',\r\n    },\r\n    recentQns_tags_parent:{\r\n        padding:'5px',\r\n        display:'flex',\r\n        margin:'-1rem 1rem .5rem 0rem',\r\n    },\r\n    recentQns_name:{\r\n         fontSize:'16px',\r\n         color:'blue',\r\n         fontWeight:'900'\r\n    },\r\n    recentQns_occupation:{\r\n        alignSelf:'center',\r\n        marginLeft:'0.5rem',\r\n        fontSize:'11px',\r\n        textAlign:'center',\r\n        padding:'2px 4px 2px 4px',\r\n        backgroundColor:'#e09f3e',\r\n        color:'white',\r\n        fontWeight:'800'\r\n    },\r\n    recentQns_askedIn:{\r\n        alignSelf:'center',\r\n        marginLeft:'1rem',\r\n        fontSize:'14px',\r\n        fontWeight:'600',\r\n        color:'grey'\r\n    },\r\n    recentQns_askedIn_bold:{\r\n        color:'#9e2a2b',\r\n        fontWeight:'800',\r\n        marginRight:'3px'  \r\n    },\r\n    recentQns_title:{\r\n        marginTop:'-1rem',\r\n        padding:'3px',\r\n        fontSize:'20px',\r\n        fontWeight:'800'\r\n    },\r\n    recentQns_answers:{\r\n        padding:'3px',\r\n        fontSize:'15px',\r\n        lineHeight:'35px'\r\n    },\r\n    recentQns_topic_tags:{\r\n      padding:'1.5rem 1rem 1rem 0rem'\r\n    },\r\n    chip:{\r\n        marginLeft:'1rem'\r\n    },\r\n    recentQns_views_parent:{\r\n        display:'flex',\r\n        \r\n        padding:'1rem 1rem 1rem 0rem',\r\n        backgroundColor:'#d8f3dc'\r\n    },\r\n    popular_desc_view:{\r\n        display:'flex',\r\n      justifyContent:'center',\r\n      alignSelf:'center',\r\n      alignItems:'center',\r\n        marginLeft:'1rem',\r\n        border:'#f9844a solid 1px',\r\n        padding:'5px',\r\n        fontSize:'13px',\r\n       \r\n    },\r\n    views_icon:{\r\n        fontSize:'20px',\r\n         marginRight:'0.5rem'\r\n    }\r\n\r\n}))\r\nfunction MostViewed() {\r\n    const classes = useStyles()\r\n    const [data,setData] =useState([])\r\n    useEffect(() =>{\r\n        fetch('/mostViewed').then(res => res.json()).then(responce => setData(responce))\r\n    },[data])\r\n    \r\n     let count = 0\r\n     //handling likes\r\n     const handleLike = (id,likes) =>{\r\n         const data = {id,likes}\r\n\r\n        fetch('/postLike',{\r\n            mode:'no-cors',\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              'Accept': 'application/json'\r\n            },\r\n            body:JSON.stringify(data)\r\n          }).then(res => res.json()).then(responce =>{console.log(responce)})\r\n     }\r\n     const  handleViews = (e,views) =>{\r\n         const data = {e,views}\r\n        fetch('/updateViews',{\r\n            mode:'no-cors',\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              'Accept': 'application/json'\r\n            },\r\n            body:JSON.stringify(data)\r\n          })\r\n     }\r\n    return (\r\n        data.map(content => {\r\n            let count = content.tags.split(',')\r\n            return (    \r\n               \r\n                <div className = {classes.homeRecentQns} >\r\n            <div className ={classes.homeRecentQnsParent}>\r\n                <div className = {classes.avatar_parent}>\r\n                 <div className ={classes.avatar}>\r\n                    <Avatar alt={content.firstName} src = {Logo} className = {classes.small}>{content.firstName[0]}</Avatar>\r\n                 </div>\r\n                 <div className ={classes.voted_parent}>\r\n                     <ArrowDropUpTwoToneIcon className = {classes.voted_up} onClick = {() => handleLike(content.postid,content.postLike+1)}/>\r\n                     <p>{content.postLike}</p>\r\n                    <ArrowDropDownTwoToneIcon className ={classes.voted_down} onClick = {() => handleLike(content.postid,content.postLike-1)}/>\r\n                 </div>\r\n                </div>\r\n                <div className ={classes.recentQns_parent}>\r\n                    <div className = {classes.recentQns_tags_parent} key = {content.postid}>\r\n                      <p className = {classes.recentQns_name}>{`${content.firstName} ${content.lastName}`}</p>\r\n                      <p className = {classes.recentQns_occupation}>{content.currentWorking}</p>\r\n                      <p className = {classes.recentQns_askedIn}><b className = {classes.recentQns_askedIn_bold}>Asked in:</b>${content.posted_date}</p>\r\n                    </div>\r\n                    <div className ={classes.recentQns_desc}>\r\n                        <p className ={classes.recentQns_title}><a href = {'/viewPost/'+content.postid} onClick= {() => handleViews(content.postid,content.views)}>{content.qnsTitle}</a></p>\r\n                        <p className ={classes.recentQns_answers}><Truncate lines={3} ellipsis={<span>... <a href='http://localhost:3000/viewPost/${content.postid}'>Read more</a></span>}>\r\n                        {ReactHtmlParser(content.Question_body)}\r\n            </Truncate></p>\r\n                    </div>\r\n                    <div className ={classes.recentQns_topic_tags}>\r\n                        {content.tags.split(',').map(chip =>{\r\n                           return <> <Chip   label={chip} variant=\"filled\" color=\"primary\" size=\"small\" icon={<LocalOfferTwoToneIcon />} /></>\r\n                        })}                    \r\n                    </div>\r\n                    <div className ={classes.recentQns_views_parent}>\r\n                            <div className = {classes.popular_desc_view}>\r\n                                <QuestionAnswerIcon className = {classes.views_icon}/>\r\n                                <div className = {classes.p}><a href={'http://localhost:3000/viewPost/'+content.postid}>2 Answers</a></div>\r\n                            </div>\r\n                            <div className = {classes.popular_desc_view}>\r\n                                <VisibilityIcon className = {classes.views_icon}/>\r\n                                <div className = {classes.p}>{content.views} views</div>\r\n                            </div>\r\n                    </div>\r\n                    \r\n                </div>\r\n                 \r\n            </div>\r\n            \r\n        </div>\r\n            )\r\n           \r\n        })\r\n        \r\n    )\r\n}\r\n\r\nexport default MostViewed\r\n",["241","242"],"C:\\Users\\Pranav\\query_hook\\client-side\\src\\components\\Questions.jsx",[],"C:\\Users\\Pranav\\query_hook\\client-side\\src\\components\\Admin.jsx",["243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260"],"import React from 'react'\r\nimport Navbar from '../components/Navbar'\r\nimport GroupIcon from '@material-ui/icons/Group';\r\nimport ContactSupportIcon from '@material-ui/icons/ContactSupport';\r\nimport QuestionAnswerIcon from '@material-ui/icons/QuestionAnswer';\r\nimport TrendingUpIcon from '@material-ui/icons/TrendingUp';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport SpeakerNotesOffTwoToneIcon from '@material-ui/icons/SpeakerNotesOffTwoTone';\r\nimport DeleteForeverTwoToneIcon from '@material-ui/icons/DeleteForeverTwoTone';\r\nimport Button from '@material-ui/core/Button';\r\nimport Box from '@material-ui/core/Box';\r\nimport '../componentcss/Admin.css'\r\nimport Logo from '../images/action.png'\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Truncate from 'react-truncate'\r\nimport ReactHtmlParser from 'react-html-parser'\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport Async from 'react-async';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { Fade } from '@material-ui/core';\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardTimePicker,\r\n  KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\n//tab functionality------------------------------\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\nfunction TabPanel(props) {\r\n    const { children, value, index, ...other } = props;\r\n  \r\n    return (\r\n      <div\r\n        role=\"tabpanel\"\r\n        hidden={value !== index}\r\n        id={`simple-tabpanel-${index}`}\r\n        aria-labelledby={`simple-tab-${index}`}\r\n        {...other}\r\n      >\r\n        {value === index && (\r\n          <Box p={3}>\r\n            <Typography>{children}</Typography>\r\n          </Box>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  TabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired,\r\n  };\r\n  \r\n  function a11yProps(index) {\r\n    return {\r\n      id: `simple-tab-${index}`,\r\n      'aria-controls': `simple-tabpanel-${index}`,\r\n    };\r\n  }\r\n  const defaultProps = {\r\n    color: 'secondary',\r\n    children: <QuestionAnswerIcon />,\r\n  };\r\n//-------------------open dialogue box to pick date-----------------\r\n\r\n  // ----------------styling the elements----------------------\r\n\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    small: {\r\n      width: theme.spacing(3.5),\r\n      height: theme.spacing(3.5),\r\n    },\r\n    root: {\r\n        marginTop:'3rem !important',\r\n      flexGrow: 1,\r\n      width: 800,\r\n      backgroundColor: theme.palette.background.paper,\r\n    },\r\n    avatar_parent:{\r\n        display:'flex',\r\n        alignSelf:'flex-start'\r\n        \r\n        \r\n    },\r\n    backdrop: {\r\n      zIndex: theme.zIndex.drawer + 1,\r\n      color: '#fff',\r\n    },\r\n    homeRecentQnsParent:{\r\n        display:'flex',\r\n       alignSelf:'center',\r\n       alignItems:'center'\r\n        \r\n    },\r\n    avatar:{\r\n        border:'2px solid blue',\r\n        borderRadius:'50%',\r\n        padding:'3px'\r\n    },\r\n    recentQns_parent:{\r\n        margin:'0rem 1rem 1rem 1rem',\r\n        \r\n    },\r\n    recentQns_tags_parent:{\r\n        padding:'5px',\r\n        display:'flex',\r\n        margin:'0rem 1rem .5rem 0rem',\r\n    },\r\n    recentQns_name:{\r\n         fontSize:'16px',\r\n         color:'blue',\r\n         fontWeight:'900',\r\n         textTransform:'capitalize'\r\n    },\r\n    \r\n    recentQns_occupation:{\r\n        alignSelf:'center',\r\n        marginLeft:'0.5rem',\r\n        fontSize:'11px',\r\n        textAlign:'center',\r\n        padding:'2px 4px 2px 4px',\r\n        backgroundColor:'#e09f3e',\r\n        color:'white',\r\n        fontWeight:'800'\r\n    },\r\n    recentQns_askedIn:{\r\n        alignSelf:'center',\r\n        marginLeft:'1rem',\r\n        fontSize:'14px',\r\n        fontWeight:'600',\r\n        color:'grey'\r\n    },\r\n    recentQns_askedIn_bold:{\r\n        color:'#9e2a2b',\r\n        fontWeight:'800',\r\n        marginRight:'3px'  \r\n    },\r\n    recentQns_title:{\r\n        marginTop:'-1rem',\r\n        padding:'3px',\r\n        fontSize:'20px',\r\n        fontWeight:'800'\r\n    },\r\n    recentQns_answers:{\r\n        padding:'3px',\r\n    \r\n        \r\n        fontSize:'15px',\r\n        lineHeight:'30px'\r\n    },\r\n    recentQns_topic_tags:{\r\n      padding:'1.5rem 1rem 1rem 0rem'\r\n    },\r\n    margin:{\r\n      marginLeft:'2rem',\r\n      marginRight:'2rem'\r\n    },\r\n    ans:{\r\n     display:'flex',\r\n     justifyContent:'space-around',\r\n     marginLeft:'1rem'\r\n    }\r\n  }));\r\n  \r\n\r\nfunction Admin() {\r\n    const classes = useStyles();\r\n    const [value, setValue] = React.useState(0);\r\n    const [open,setOpen] = React.useState(false);\r\n    const [selectedDate,setDate] = React.useState(new Date(Date.now()));\r\n    const [allData,setData] = React.useState([])\r\n    const [id,setId] = React.useState(0);\r\n    const [totalUser,setTotalUser] = React.useState(0)\r\n    const [totalqns,setTotalqns] = React.useState(0)\r\n    const [totalans,setTotalans] = React.useState(0)\r\n    const [showLoader,setLoader] = React.useState(true)\r\n    const [statement,setStatement] = React.useState('')\r\n    const [condition,setCondition] = React.useState('')\r\n    const [openAlert,setOpenAlert] = React.useState(false)\r\n    let {answerandpost,postanduser,result} = allData\r\n    \r\n    //getting all information when page loads\r\n    React.useEffect(() =>{\r\n      \r\n       fetch('/admin-data').then(data =>{\r\n        data.json().then(result => {\r\n          setData(result)\r\n         setTotalUser(result.result.length >9?result.result.length:\"0\"+result.result.length)\r\n         setTotalqns(result.postanduser.length >9 ?result.postanduser.length:\"0\"+result.postanduser.length)\r\n         setTotalans(result.answerandpost.length > 9 ?result.answerandpost.length:\"0\"+result.answerandpost.length)\r\n        })\r\n      })\r\n     \r\n    },[allData])\r\n    const handleCloseAlert = (event, reason) => {\r\n      if (reason === 'clickaway') {\r\n        return;\r\n      }\r\n  \r\n      setOpenAlert(false);\r\n    };\r\n    const handleChangeDate = (date) => {\r\n      setDate(date);\r\n    };\r\n    function Alert(props) {\r\n      return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n    }\r\n  const countQuestion = (id) =>{\r\n    var question = 0\r\n    postanduser.forEach((count) =>{\r\n      if(count.userid == id) question+=1\r\n    })\r\n     return question\r\n  }\r\n  const countAnswers = (id) =>{\r\n    var count = 0;\r\n     answerandpost.forEach((data) =>{\r\n       if(data.userid == id ) count +=1 \r\n     })\r\n     setLoader(false)\r\n     return count;\r\n  }\r\n  const handleSuspend = (id) =>{\r\n    const data = {id,selectedDate};\r\n    setOpen(false)\r\n    fetch('/suspendUser',{\r\n      mode:'no-cors',\r\n      method: 'POST',\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n    'Accept': 'application/json'\r\n  },\r\n  body:JSON.stringify(data)\r\n    }).then(res => res.json()).then(dat =>{\r\n      console.log(dat)\r\n    })\r\n\r\n\r\n  };\r\n  console.log(answerandpost)\r\n  const handleClose = () =>{\r\n    setOpen(false)\r\n  }\r\n  const handleSuspendDialog = (id)=>{\r\n    setOpen(true)\r\n    setId(id);\r\n  }\r\n    const handleChange = (event, newValue) => {\r\n      setValue(newValue);\r\n    };\r\nconst handleDeleteUser = (id) =>{\r\n  const userid = {id}\r\n      fetch('/deleteUser',{\r\n        mode:'no-cors',\r\n        method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Accept': 'application/json'\r\n    },\r\n    body:JSON.stringify(userid)\r\n      }).then(res => res.json()).then(dat =>{\r\n        if(dat.success ==200){\r\n          setOpenAlert(true)\r\n          setCondition('success')\r\n          setStatement(dat.msg);\r\n        }\r\n        else{\r\n          setOpenAlert(true)\r\n          setCondition('error')\r\n          setStatement(dat.msg);\r\n        }\r\n      })\r\n}\r\n    const handleDeleteAns = (id) =>{\r\n      const ansid = {id}\r\n      fetch('/deleteAns',{\r\n        mode:'no-cors',\r\n        method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Accept': 'application/json'\r\n    },\r\n    body:JSON.stringify(ansid)\r\n      }).then(res => res.json()).then(dat =>{\r\n        if(dat.success ==200){\r\n          setOpenAlert(true)\r\n          setCondition('success')\r\n          setStatement(dat.msg);\r\n        }\r\n      })\r\n\r\n    }\r\n    //handle delete posts\r\n    const handleDeletePost = (id) =>{\r\n      const postid = {id}\r\n      fetch('/deletePost',{\r\n        mode:'no-cors',\r\n        method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Accept': 'application/json'\r\n    },\r\n    body:JSON.stringify(postid)\r\n      }).then(res => res.json()).then(dat =>{\r\n        if(dat.success ==200){\r\n          setOpenAlert(true)\r\n          setCondition('success')\r\n          setStatement(dat.msg);\r\n        }\r\n        else{\r\n          setOpenAlert(true)\r\n          setCondition('error')\r\n          setStatement(\"something went wrong\");\r\n        }\r\n      })\r\n\r\n    }\r\n    return (\r\n    \r\n        <div className = \"admin_parent\">\r\n        <div className = \"admin_child\">\r\n        <Navbar/>\r\n        <Backdrop className={classes.backdrop} open={showLoader} onClick={handleClose}>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n      <Snackbar open={openAlert} autoHideDuration={6000} onClose={handleCloseAlert}  key={Fade}    anchorOrigin={{\r\n          vertical: 'center',\r\n          horizontal: 'top',\r\n        }}>\r\n        <Alert onClose={handleCloseAlert} id = \"alertgreen\" severity = {condition} >\r\n       {statement}\r\n          </Alert>\r\n       \r\n      </Snackbar>\r\n        <div className = \"admin_content\">\r\n            <h1 className = \"admin_dashboard_heading\">\r\n                Admin Dashboard\r\n            </h1>\r\n            <div className= \"admin_total_display_parent\">\r\n                    <div className = \"admin_total_display_child\">\r\n                        <GroupIcon className = \"admin_icon\" style = {{color:'#83a95c'}}/>\r\n                        <h3 className = \"total_display\" style = {{color:'#583d72'}}>\r\n                            {totalUser}\r\n                        </h3>\r\n                        <p className = \"total_desc\">\r\n                            Users\r\n                        </p>\r\n                    </div>\r\n                    <div className = \"admin_total_display_child\">\r\n                       <ContactSupportIcon className = \"admin_icon\"  style = {{color:'#ff884b'}}/>\r\n                        <h3 className = \"total_display\" style = {{color:'#b088f9'}}>\r\n                            {totalqns}\r\n                        </h3>\r\n                        <p className = \"total_desc\">\r\n                            Questions\r\n                        </p>\r\n                    </div>\r\n                    <div className = \"admin_total_display_child\" >\r\n                        <QuestionAnswerIcon className = \"admin_icon\"  style = {{color:'#83a95c'}}/>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \r\n                        <h3 className = \"total_display\" style = {{color:'#d1c145'}}>\r\n                            {totalans}\r\n                        </h3>\r\n                        <p className = \"total_desc\">\r\n                            Answers\r\n                        </p>\r\n                    </div>\r\n                   \r\n                    <div className = \"admin_total_display_child\">\r\n                      <TrendingUpIcon className = \"admin_icon\" style = {{color:'#892cdc'}}/>\r\n                        <h3 className = \"total_display\" style = {{color:'#ea2c62'}}>\r\n                            01\r\n                        </h3>\r\n                        <p className = \"total_desc\">\r\n                            Best Answers\r\n                        </p>\r\n                    </div>\r\n            </div>\r\n            <Async >\r\n      {({ data, err, isLoading }) =>\r\n      {\r\n          if (isLoading) setLoader(true)\r\n      if (err) return `Something went wrong: ${err.message}`\r\n      if (allData.result){\r\n        return (\r\n            <div className = \"admin_qns_ans_tab\">\r\n            <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Tabs value={value} onChange={handleChange} aria-label=\"simple tabs example\" >\r\n          <Tab label=\"All questions\" {...a11yProps(0)} />\r\n          <Tab label=\"All answers\" {...a11yProps(1)} />\r\n          <Tab label=\"forum members\" {...a11yProps(2)} />\r\n        </Tabs>\r\n      </AppBar>\r\n      <TabPanel value={value} index={0}>\r\n       {/* getting all questions here */}\r\n       \r\n       {\r\n        \r\n         postanduser.map((displayQns,index) =>{\r\n         \r\n         return (\r\n           <>\r\n           <div className ={classes.homeRecentQnsParent}>\r\n           <div className = {classes.avatar_parent}>\r\n                 <div className ={classes.avatar} key = {index}>\r\n                    <Avatar alt=\"R\" src = \"\" style = {{backgroundColor:displayQns.profile_img}}className = {classes.small}>{displayQns.firstName[0].toUpperCase()}</Avatar>\r\n                 </div>\r\n                 \r\n                </div>\r\n                <div className ={classes.recentQns_parent} key = {index}>\r\n                    <div className = {classes.recentQns_tags_parent} >\r\n                      <p className = {classes.recentQns_name}>{displayQns.firstName} {displayQns.lastName}</p>\r\n                      <p className = {classes.recentQns_occupation}>{displayQns.currentWorking}</p>\r\n                      <p className = {classes.recentQns_askedIn}><b className = {classes.recentQns_askedIn_bold}>Asked in:</b>{displayQns.posted_date}</p>\r\n                    </div>\r\n                    <div className ={classes.recentQns_desc} key = {index}>\r\n                        <p className ={classes.recentQns_title}><a href = {\"http://localhost:3000/viewPost/\"+displayQns.postid}>{displayQns.qnsTitle}</a></p>\r\n                        <p className ={classes.recentQns_answers}><Truncate lines={3} ellipsis={<span>... <a href = {\"http://localhost:3000/viewPost/\"+displayQns.postid}>Read more</a></span>}>\r\n                        {ReactHtmlParser(displayQns.Question_body)}\r\n            </Truncate></p>\r\n            <span className = \"delete_admin\">\r\n                    <IconButton aria-label=\"delete\" onClick = {() => handleDeletePost(displayQns.postid)} >\r\n                <DeleteIcon style= {{color:'#6930c3'}}/>\r\n              </IconButton>\r\n            </span>\r\n                    </div>\r\n                    \r\n                </div>\r\n                </div> \r\n           </>\r\n         )\r\n         })\r\n       }\r\n                \r\n            \r\n      </TabPanel>\r\n      <TabPanel value={value} index={1}>\r\n      {/* getting question related answers */}\r\n      {\r\n        postanduser.map((qnsans,index) =>{\r\n          var count = 0;\r\n          return(<>\r\n            <div className ={classes.homeRecentQnsParent}>\r\n                <div className = {classes.avatar_parent}>\r\n                 <div className ={classes.avatar}>\r\n                    <Avatar alt=\"R\" src = \"\" style = {{backgroundColor:qnsans.profile_img}} className = {classes.small}>{qnsans.firstName[0].toUpperCase()}</Avatar>\r\n                 </div>\r\n                 \r\n                </div>\r\n                <div className ={classes.recentQns_parent}>\r\n                    <div className = {classes.recentQns_tags_parent} >\r\n                      <p className = {classes.recentQns_name}>{qnsans.firstName} {qnsans.lastName}</p>\r\n                      <p className = {classes.recentQns_occupation}>{qnsans.currentWorking}</p>\r\n                      <p className = {classes.recentQns_askedIn}><b className = {classes.recentQns_askedIn_bold}>Asked in:</b>{qnsans.posted_date}</p>\r\n                    </div>\r\n                    <div className ={classes.recentQns_desc}>\r\n                        <p className ={classes.recentQns_title}><a href = \"jjjj\"><Truncate lines={1} ellipsis={<span>... <a href='http://localhost:3000/viewPost/${content.postid}'></a></span>}>{qnsans.qnsTitle}</Truncate></a></p>\r\n                        <p className =\"answers_tags\">Answers</p>\r\n                        <div className = \"anwers_admin_main\">\r\n                        {\r\n                           \r\n                          answerandpost.map((ans,index) =>{\r\n                            \r\n                            if(ans.postid === qnsans.postid){\r\n                              count +=1\r\n                              return (<>\r\n                                <div className = \"answer_admin_child\" >\r\n                            <Badge badgeContent={count} {...defaultProps} />\r\n                            <p className ={classes.ans}><Truncate lines={1} ellipsis={<span>... <a href='http://localhost:3000/viewPost/${content.postid}'></a></span>}>\r\n                            {ReactHtmlParser(ans.answer_body)}\r\n                              </Truncate>\r\n                            <span >\r\n                            <IconButton aria-label=\"delete\" className = \"answer_delete\" onClick = {() => handleDeleteAns(ans.answerid)}>\r\n                             <DeleteIcon style= {{color:'#6930c3'}}  />\r\n                            </IconButton>\r\n                              </span></p>\r\n                        </div>\r\n                              </>)\r\n                            }\r\n                            \r\n                          })\r\n                         \r\n                        }\r\n                        \r\n                    </div>\r\n           \r\n                    </div>\r\n                    \r\n                </div>\r\n                 \r\n            </div>\r\n          </>)\r\n        })\r\n      }\r\n      \r\n      </TabPanel>\r\n      <TabPanel value={value} index={2}>\r\n       {/* panel for users details */}\r\n       <div className = \"member_parent\">\r\n        {\r\n          result.map((res,index) =>{\r\n            if(res.account_status !== 'deleted')\r\n            return(\r\n              <div className = \"member_main\">\r\n            <div className = {classes.avatar_parent} >\r\n                 <div className ={classes.avatar}>\r\n                    <Avatar alt=\"R\" src = \"\" className = {classes.small} style = {{backgroundColor:res.profile_img}}>{res.firstName[0].toUpperCase()}</Avatar>\r\n                 </div>\r\n                 </div>\r\n                 <div  className = \"member_main_child\">\r\n                    <div className = {classes.recentQns_tags_parent} >\r\n                      <p style = {{color:'blue',fontSize:'18px',fontWeight:700,textTransform:'capitalize'}}>{res.firstName} {res.lastName}</p>\r\n                      <p className = {classes.recentQns_occupation}>{res.currentWorking}</p>\r\n                    </div>\r\n                    \r\n                    <div className =\"member_qns_ans\">\r\n                      <p>{countQuestion(res.id)} Questions</p>\r\n                      <p>{countAnswers(res.id)} Answers</p>\r\n                    </div>\r\n                    \r\n                    <div className = \"member_actions\">\r\n                    {\r\n                      res.account_status =='active'?<div> <Button variant=\"contained\" size=\"small\" color=\"primary\"  startIcon={<SpeakerNotesOffTwoToneIcon />} onClick = {() => handleSuspendDialog(res.id)}>\r\n                    Suspend\r\n                </Button></div> : <div><Button variant=\"contained\" size=\"small\" color=\"primary\"  startIcon={<SpeakerNotesOffTwoToneIcon />} className = \"delete_main\" disabled >\r\n                    suspended\r\n                </Button></div>\r\n                    }\r\n                    {\r\n                      res.account_status =='deleted'?<div><Button variant=\"outlined\" size=\"small\" color=\"secondary\" className={classes.margin} startIcon={<DeleteForeverTwoToneIcon />} disabled>\r\n          Deleted \r\n        </Button></div>:<div><Button variant=\"outlined\" size=\"small\" color=\"secondary\" className={classes.margin} startIcon={<DeleteForeverTwoToneIcon />} onClick = {() => handleDeleteUser(res.id)} >\r\n          Delete \r\n        </Button></div>\r\n                    }\r\n        \r\n                    </div>\r\n                  {/* modal to open suspend account */}\r\n                   \r\n                  </div>\r\n                 \r\n             </div>\r\n            )\r\n          })\r\n        }\r\n           \r\n             </div>\r\n      </TabPanel>\r\n        </div>\r\n         </div>\r\n         )\r\n\r\n}\r\n\r\n}\r\n}\r\n</Async>\r\n <Dialog open={open} onClose={handleClose} aria-labelledby=\"max-width-dialog-title\" maxWidth = \"xs\"> \r\n                        <DialogTitle id=\"max-width-dialog-title\">Deactivating account</DialogTitle>\r\n                      <DialogContent>\r\n                        <DialogContentText>\r\n                          You can suspend users account,it will activate automatically after suspension time over. \r\n                        </DialogContentText>\r\n                        <form  noValidate className = \"date_picker\">\r\n                        <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                            <KeyboardDatePicker\r\n                            margin=\"normal\"\r\n                            id=\"date-picker-dialog\"\r\n                            label=\"Date picker dialog\"\r\n                            format=\"dd/MM/yyyy\"\r\n                            value={selectedDate}\r\n                            onChange={handleChangeDate}\r\n                            KeyboardButtonProps={{\r\n                              'aria-label': 'change date',\r\n                            }}\r\n                          />\r\n                          </MuiPickersUtilsProvider>\r\n                         </form>\r\n        </DialogContent>\r\n                    <DialogActions>\r\n                    <Button onClick={() => handleSuspend(id)} color=\"primary\">\r\n                        Suspend profile\r\n                      </Button>\r\n                      <Button  color=\"primary\" onClick = {handleClose}>\r\n                        Close\r\n                      </Button>\r\n                    </DialogActions>\r\n                  </Dialog>\r\n      </div>\r\n        \r\n        </div>\r\n \r\n        </div>\r\n   \r\n         ) \r\n  \r\n     \r\n    \r\n      \r\n}\r\n\r\nexport default Admin\r\n","C:\\Users\\Pranav\\query_hook\\client-side\\src\\components\\AdminLogin.jsx",["261","262"],"import React,{useState,useContext} from 'react'\r\nimport logo from '../images/login_main.png'\r\nimport '../componentcss/Login.css';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport { Fade } from '@material-ui/core';\r\nimport Authapi from './ContextApi';\r\nimport Cookies from 'js-cookie';\r\nimport {Redirect} from 'react-router-dom'\r\nfunction Copyright() {\r\n    return (\r\n      <Typography variant=\"body3\" color=\"textSecondary\" align=\"center\">\r\n        {'Copyright © '}\r\n        <Link color=\"inherit\" href=\"https://material-ui.com/\">\r\n          Query hook\r\n        </Link>\r\n        {new Date().getFullYear()}\r\n        \r\n      </Typography>\r\n    );\r\n  }\r\n  \r\n  const useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n      marginTop: theme.spacing(8),\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      alignItems: 'center',\r\n    },\r\n    avatar: {\r\n      margin: theme.spacing(2),\r\n      backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n      width: '100%', // Fix IE 11 issue.\r\n      marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n      margin: theme.spacing(3, 0, 2),\r\n    },\r\n   \r\n  }));\r\n  function Alert(props) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n  }\r\nfunction AdminLogin() {\r\n    const classes = useStyles();\r\n    const Auth = useContext(Authapi)\r\n    const [open, setOpen] = useState(false);\r\n    const [statement,setStatement] = useState('')\r\n    const [condition,setCondition] = useState('')\r\n    const [email,setEmail] = useState(\"\")\r\n    const [password,setPassword] = useState(\"\")\r\n    const [remember,setRemember] = useState(false)\r\n    const data  = {email:email,password:password,remember:remember}\r\n    const handleClose = (event, reason) => {\r\n      if (reason === 'clickaway') {\r\n        return;\r\n      }\r\n  \r\n      setOpen(false);\r\n    };\r\n    function submit(e){\r\n      e.preventDefault()\r\n      \r\n      fetch('/login',{\r\n        mode:'no-cors',\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Accept': 'application/json'\r\n        },\r\n        body:JSON.stringify(data)\r\n      }).then(async res => res.json()).then(data => {\r\n        const {success,msg,id} = data\r\n        console.log(data)\r\n        if(success===200){\r\n          setCondition('success')\r\n          setStatement(msg)\r\n          setOpen(true)\r\n          Auth.setAuth(true)\r\n          console.log(Auth.Auth)\r\n          Cookies.set('id',id)\r\n          console.log(id)\r\n         \r\n        }\r\n        else{\r\n          setCondition('error')\r\n          setStatement(msg)\r\n          setOpen(true)\r\n          setTimeout(()=>{\r\n            window.location.reload()\r\n          },5000)\r\n        }\r\n      })\r\n     \r\n    }\r\n    return (\r\n      <Authapi.Consumer>\r\n        {\r\n          ({Auth}) =>{\r\n            if(Auth){\r\n              return <Redirect to  = '/admin'></Redirect>\r\n            }\r\n            else{\r\n              return <>\r\n              <Container component=\"main\" maxWidth=\"xs\">\r\n        <CssBaseline />\r\n        <div className={classes.paper}>\r\n        <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}  key={Fade}    anchorOrigin={{\r\n          vertical: 'top',\r\n          horizontal: 'right',\r\n        }}>\r\n        <Alert onClose={handleClose} id = \"alertgreen\" severity = {condition} >\r\n       {statement}\r\n          </Alert>\r\n       \r\n      </Snackbar>\r\n          <Avatar className={classes.avatar}>\r\n            <img src = {logo} width = \"50px\" height  = \"50px\"></img>\r\n          </Avatar>\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            Admin login\r\n          </Typography>\r\n          <form className={classes.form} noValidate>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              id=\"email\"\r\n              label=\"Email Address\"\r\n              name=\"email\"\r\n              onChange = {(e)=>setEmail(e.target.value)}\r\n              autoFocus\r\n            />\r\n            <TextField\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              name=\"password\"\r\n              label=\"Password\"\r\n              type=\"password\"\r\n              id=\"password\"\r\n              autoComplete=\"current-password\"\r\n              onChange = {(e)=>setPassword(e.target.value)}\r\n            />\r\n            <FormControlLabel  className = \"remember\" \r\n              control={<Checkbox value=\"remember\" color=\"primary\" onChange = {(e)=>{\r\n                setRemember(e.target.checked)\r\n              }}/>}\r\n              label=\"Remember me\"\r\n            />\r\n            <Button\r\n              type=\"submit\"\r\n              fullWidth\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={classes.submit}\r\n              onClick = {submit}\r\n            >\r\n              Sign In\r\n            </Button>\r\n           \r\n          </form>\r\n        </div>\r\n        <Box mt={8} ml = {15}>\r\n          <Copyright />\r\n        </Box>\r\n      </Container>\r\n   \r\n              </>\r\n            }\r\n          \r\n        }}\r\n      </Authapi.Consumer>\r\n      \r\n    );\r\n    \r\n}\r\n\r\nexport default AdminLogin\r\n",{"ruleId":"263","replacedBy":"264"},{"ruleId":"265","replacedBy":"266"},{"ruleId":"267","severity":1,"message":"268","line":1,"column":15,"nodeType":"269","messageId":"270","endLine":1,"endColumn":25},{"ruleId":"267","severity":1,"message":"271","line":6,"column":8,"nodeType":"269","messageId":"270","endLine":6,"endColumn":15},{"ruleId":"267","severity":1,"message":"272","line":7,"column":8,"nodeType":"269","messageId":"270","endLine":7,"endColumn":15},{"ruleId":"273","severity":1,"message":"274","line":132,"column":13,"nodeType":"275","endLine":132,"endColumn":63},{"ruleId":"267","severity":1,"message":"276","line":17,"column":8,"nodeType":"269","messageId":"270","endLine":17,"endColumn":23},{"ruleId":"277","severity":1,"message":"278","line":106,"column":3,"nodeType":"279","messageId":"280","endLine":106,"endColumn":7},{"ruleId":"267","severity":1,"message":"281","line":132,"column":10,"nodeType":"269","messageId":"270","endLine":132,"endColumn":19},{"ruleId":"282","severity":1,"message":"283","line":217,"column":27,"nodeType":"284","messageId":"280","endLine":217,"endColumn":29},{"ruleId":"267","severity":1,"message":"285","line":8,"column":8,"nodeType":"269","messageId":"270","endLine":8,"endColumn":24},{"ruleId":"267","severity":1,"message":"286","line":9,"column":8,"nodeType":"269","messageId":"270","endLine":9,"endColumn":16},{"ruleId":"273","severity":1,"message":"274","line":147,"column":13,"nodeType":"275","endLine":147,"endColumn":63},{"ruleId":"267","severity":1,"message":"287","line":9,"column":8,"nodeType":"269","messageId":"270","endLine":9,"endColumn":14},{"ruleId":"267","severity":1,"message":"288","line":5,"column":10,"nodeType":"269","messageId":"270","endLine":5,"endColumn":15},{"ruleId":"267","severity":1,"message":"289","line":6,"column":8,"nodeType":"269","messageId":"270","endLine":6,"endColumn":17},{"ruleId":"267","severity":1,"message":"290","line":8,"column":8,"nodeType":"269","messageId":"270","endLine":8,"endColumn":18},{"ruleId":"267","severity":1,"message":"291","line":9,"column":8,"nodeType":"269","messageId":"270","endLine":9,"endColumn":14},{"ruleId":"267","severity":1,"message":"292","line":12,"column":8,"nodeType":"269","messageId":"270","endLine":12,"endColumn":18},{"ruleId":"267","severity":1,"message":"293","line":103,"column":10,"nodeType":"269","messageId":"270","endLine":103,"endColumn":14},{"ruleId":"267","severity":1,"message":"294","line":104,"column":24,"nodeType":"269","messageId":"270","endLine":104,"endColumn":33},{"ruleId":"267","severity":1,"message":"295","line":105,"column":16,"nodeType":"269","messageId":"270","endLine":105,"endColumn":24},{"ruleId":"267","severity":1,"message":"296","line":125,"column":9,"nodeType":"269","messageId":"270","endLine":125,"endColumn":21},{"ruleId":"267","severity":1,"message":"293","line":126,"column":11,"nodeType":"269","messageId":"270","endLine":126,"endColumn":15},{"ruleId":"273","severity":1,"message":"274","line":135,"column":13,"nodeType":"275","endLine":135,"endColumn":30},{"ruleId":"277","severity":1,"message":"297","line":25,"column":9,"nodeType":"279","messageId":"280","endLine":25,"endColumn":23},{"ruleId":"267","severity":1,"message":"298","line":4,"column":8,"nodeType":"269","messageId":"270","endLine":4,"endColumn":18},{"ruleId":"267","severity":1,"message":"299","line":7,"column":7,"nodeType":"269","messageId":"270","endLine":7,"endColumn":18},{"ruleId":"267","severity":1,"message":"300","line":1,"column":36,"nodeType":"269","messageId":"270","endLine":1,"endColumn":43},{"ruleId":"267","severity":1,"message":"301","line":7,"column":8,"nodeType":"269","messageId":"270","endLine":7,"endColumn":13},{"ruleId":"267","severity":1,"message":"302","line":10,"column":10,"nodeType":"269","messageId":"270","endLine":10,"endColumn":13},{"ruleId":"267","severity":1,"message":"303","line":11,"column":7,"nodeType":"269","messageId":"270","endLine":11,"endColumn":15},{"ruleId":"267","severity":1,"message":"304","line":1,"column":15,"nodeType":"269","messageId":"270","endLine":1,"endColumn":23},{"ruleId":"267","severity":1,"message":"291","line":3,"column":8,"nodeType":"269","messageId":"270","endLine":3,"endColumn":14},{"ruleId":"267","severity":1,"message":"305","line":4,"column":9,"nodeType":"269","messageId":"270","endLine":4,"endColumn":13},{"ruleId":"267","severity":1,"message":"306","line":9,"column":8,"nodeType":"269","messageId":"270","endLine":9,"endColumn":22},{"ruleId":"267","severity":1,"message":"307","line":15,"column":7,"nodeType":"269","messageId":"270","endLine":15,"endColumn":17},{"ruleId":"277","severity":1,"message":"308","line":74,"column":11,"nodeType":"279","messageId":"280","endLine":74,"endColumn":18},{"ruleId":"309","severity":1,"message":"310","line":113,"column":21,"nodeType":"311","endLine":123,"endColumn":6},{"ruleId":"309","severity":1,"message":"312","line":123,"column":7,"nodeType":"313","endLine":123,"endColumn":14,"suggestions":"314"},{"ruleId":"267","severity":1,"message":"315","line":10,"column":8,"nodeType":"269","messageId":"270","endLine":10,"endColumn":12},{"ruleId":"267","severity":1,"message":"316","line":11,"column":10,"nodeType":"269","messageId":"270","endLine":11,"endColumn":18},{"ruleId":"267","severity":1,"message":"317","line":14,"column":8,"nodeType":"269","messageId":"270","endLine":14,"endColumn":15},{"ruleId":"267","severity":1,"message":"318","line":142,"column":10,"nodeType":"269","messageId":"270","endLine":142,"endColumn":15},{"ruleId":"267","severity":1,"message":"318","line":171,"column":17,"nodeType":"269","messageId":"270","endLine":171,"endColumn":22},{"ruleId":"319","severity":1,"message":"320","line":195,"column":115,"nodeType":"321","messageId":"322","endLine":195,"endColumn":165},{"ruleId":"267","severity":1,"message":"323","line":2,"column":9,"nodeType":"269","messageId":"270","endLine":2,"endColumn":17},{"ruleId":"267","severity":1,"message":"324","line":19,"column":8,"nodeType":"269","messageId":"270","endLine":19,"endColumn":11},{"ruleId":"267","severity":1,"message":"325","line":20,"column":8,"nodeType":"269","messageId":"270","endLine":20,"endColumn":18},{"ruleId":"267","severity":1,"message":"326","line":22,"column":8,"nodeType":"269","messageId":"270","endLine":22,"endColumn":16},{"ruleId":"267","severity":1,"message":"327","line":23,"column":8,"nodeType":"269","messageId":"270","endLine":23,"endColumn":16},{"ruleId":"267","severity":1,"message":"328","line":24,"column":10,"nodeType":"269","messageId":"270","endLine":24,"endColumn":14},{"ruleId":"267","severity":1,"message":"329","line":32,"column":8,"nodeType":"269","messageId":"270","endLine":32,"endColumn":9},{"ruleId":"267","severity":1,"message":"330","line":93,"column":13,"nodeType":"269","messageId":"270","endLine":93,"endColumn":24},{"ruleId":"267","severity":1,"message":"331","line":95,"column":15,"nodeType":"269","messageId":"270","endLine":95,"endColumn":19},{"ruleId":"267","severity":1,"message":"332","line":116,"column":17,"nodeType":"269","messageId":"270","endLine":116,"endColumn":21},{"ruleId":"333","severity":1,"message":"334","line":158,"column":16,"nodeType":"335","endLine":158,"endColumn":44},{"ruleId":"333","severity":1,"message":"334","line":168,"column":16,"nodeType":"335","endLine":168,"endColumn":44},{"ruleId":"267","severity":1,"message":"336","line":2,"column":8,"nodeType":"269","messageId":"270","endLine":2,"endColumn":12},{"ruleId":"267","severity":1,"message":"287","line":4,"column":8,"nodeType":"269","messageId":"270","endLine":4,"endColumn":14},{"ruleId":"267","severity":1,"message":"285","line":16,"column":8,"nodeType":"269","messageId":"270","endLine":16,"endColumn":24},{"ruleId":"267","severity":1,"message":"286","line":17,"column":8,"nodeType":"269","messageId":"270","endLine":17,"endColumn":16},{"ruleId":"267","severity":1,"message":"305","line":19,"column":8,"nodeType":"269","messageId":"270","endLine":19,"endColumn":12},{"ruleId":"267","severity":1,"message":"324","line":21,"column":8,"nodeType":"269","messageId":"270","endLine":21,"endColumn":11},{"ruleId":"267","severity":1,"message":"323","line":28,"column":9,"nodeType":"269","messageId":"270","endLine":28,"endColumn":17},{"ruleId":"267","severity":1,"message":"337","line":100,"column":12,"nodeType":"269","messageId":"270","endLine":100,"endColumn":16},{"ruleId":"338","severity":2,"message":"339","line":12,"column":21,"nodeType":"269","endLine":12,"endColumn":30},{"ruleId":"267","severity":1,"message":"340","line":1,"column":46,"nodeType":"269","messageId":"270","endLine":1,"endColumn":54},{"ruleId":"267","severity":1,"message":"341","line":5,"column":8,"nodeType":"269","messageId":"270","endLine":5,"endColumn":13},{"ruleId":"267","severity":1,"message":"323","line":6,"column":9,"nodeType":"269","messageId":"270","endLine":6,"endColumn":17},{"ruleId":"267","severity":1,"message":"342","line":7,"column":8,"nodeType":"269","messageId":"270","endLine":7,"endColumn":16},{"ruleId":"267","severity":1,"message":"343","line":12,"column":8,"nodeType":"269","messageId":"270","endLine":12,"endColumn":20},{"ruleId":"267","severity":1,"message":"285","line":16,"column":8,"nodeType":"269","messageId":"270","endLine":16,"endColumn":24},{"ruleId":"267","severity":1,"message":"331","line":38,"column":11,"nodeType":"269","messageId":"270","endLine":38,"endColumn":15},{"ruleId":"267","severity":1,"message":"344","line":39,"column":12,"nodeType":"269","messageId":"270","endLine":39,"endColumn":21},{"ruleId":"267","severity":1,"message":"345","line":40,"column":12,"nodeType":"269","messageId":"270","endLine":40,"endColumn":16},{"ruleId":"267","severity":1,"message":"346","line":44,"column":12,"nodeType":"269","messageId":"270","endLine":44,"endColumn":20},{"ruleId":"267","severity":1,"message":"347","line":44,"column":22,"nodeType":"269","messageId":"270","endLine":44,"endColumn":28},{"ruleId":"309","severity":1,"message":"348","line":56,"column":6,"nodeType":"313","endLine":56,"endColumn":8,"suggestions":"349"},{"ruleId":"309","severity":1,"message":"350","line":71,"column":6,"nodeType":"313","endLine":71,"endColumn":8,"suggestions":"351"},{"ruleId":"333","severity":1,"message":"334","line":137,"column":33,"nodeType":"335","endLine":137,"endColumn":61},{"ruleId":"333","severity":1,"message":"334","line":148,"column":29,"nodeType":"335","endLine":148,"endColumn":57},{"ruleId":"267","severity":1,"message":"344","line":10,"column":12,"nodeType":"269","messageId":"270","endLine":10,"endColumn":21},{"ruleId":"267","severity":1,"message":"352","line":11,"column":12,"nodeType":"269","messageId":"270","endLine":11,"endColumn":21},{"ruleId":"267","severity":1,"message":"304","line":1,"column":15,"nodeType":"269","messageId":"270","endLine":1,"endColumn":23},{"ruleId":"267","severity":1,"message":"315","line":10,"column":8,"nodeType":"269","messageId":"270","endLine":10,"endColumn":12},{"ruleId":"267","severity":1,"message":"316","line":11,"column":10,"nodeType":"269","messageId":"270","endLine":11,"endColumn":18},{"ruleId":"267","severity":1,"message":"353","line":12,"column":8,"nodeType":"269","messageId":"270","endLine":12,"endColumn":16},{"ruleId":"267","severity":1,"message":"317","line":14,"column":8,"nodeType":"269","messageId":"270","endLine":14,"endColumn":15},{"ruleId":"267","severity":1,"message":"354","line":150,"column":12,"nodeType":"269","messageId":"270","endLine":150,"endColumn":18},{"ruleId":"282","severity":1,"message":"283","line":154,"column":15,"nodeType":"284","messageId":"280","endLine":154,"endColumn":17},{"ruleId":"282","severity":1,"message":"283","line":179,"column":22,"nodeType":"284","messageId":"280","endLine":179,"endColumn":24},{"ruleId":"267","severity":1,"message":"318","line":184,"column":17,"nodeType":"269","messageId":"270","endLine":184,"endColumn":22},{"ruleId":"267","severity":1,"message":"355","line":6,"column":8,"nodeType":"269","messageId":"270","endLine":6,"endColumn":29},{"ruleId":"267","severity":1,"message":"356","line":7,"column":8,"nodeType":"269","messageId":"270","endLine":7,"endColumn":12},{"ruleId":"267","severity":1,"message":"357","line":8,"column":8,"nodeType":"269","messageId":"270","endLine":8,"endColumn":26},{"ruleId":"267","severity":1,"message":"358","line":9,"column":8,"nodeType":"269","messageId":"270","endLine":9,"endColumn":22},{"ruleId":"267","severity":1,"message":"315","line":13,"column":8,"nodeType":"269","messageId":"270","endLine":13,"endColumn":12},{"ruleId":"267","severity":1,"message":"359","line":16,"column":8,"nodeType":"269","messageId":"270","endLine":16,"endColumn":25},{"ruleId":"267","severity":1,"message":"317","line":22,"column":8,"nodeType":"269","messageId":"270","endLine":22,"endColumn":15},{"ruleId":"267","severity":1,"message":"302","line":27,"column":19,"nodeType":"269","messageId":"270","endLine":27,"endColumn":22},{"ruleId":"309","severity":1,"message":"360","line":290,"column":8,"nodeType":"313","endLine":290,"endColumn":17,"suggestions":"361"},{"ruleId":"282","severity":1,"message":"283","line":422,"column":37,"nodeType":"284","messageId":"280","endLine":422,"endColumn":39},{"ruleId":"267","severity":1,"message":"316","line":11,"column":10,"nodeType":"269","messageId":"270","endLine":11,"endColumn":18},{"ruleId":"267","severity":1,"message":"317","line":14,"column":8,"nodeType":"269","messageId":"270","endLine":14,"endColumn":15},{"ruleId":"267","severity":1,"message":"318","line":146,"column":10,"nodeType":"269","messageId":"270","endLine":146,"endColumn":15},{"ruleId":"267","severity":1,"message":"318","line":175,"column":17,"nodeType":"269","messageId":"270","endLine":175,"endColumn":22},{"ruleId":"319","severity":1,"message":"320","line":198,"column":115,"nodeType":"321","messageId":"322","endLine":198,"endColumn":165},{"ruleId":"263","replacedBy":"362"},{"ruleId":"265","replacedBy":"363"},{"ruleId":"267","severity":1,"message":"315","line":18,"column":8,"nodeType":"269","messageId":"270","endLine":18,"endColumn":12},{"ruleId":"267","severity":1,"message":"364","line":39,"column":3,"nodeType":"269","messageId":"270","endLine":39,"endColumn":21},{"ruleId":"267","severity":1,"message":"365","line":42,"column":8,"nodeType":"269","messageId":"270","endLine":42,"endColumn":19},{"ruleId":"267","severity":1,"message":"285","line":43,"column":8,"nodeType":"269","messageId":"270","endLine":43,"endColumn":24},{"ruleId":"267","severity":1,"message":"341","line":45,"column":10,"nodeType":"269","messageId":"270","endLine":45,"endColumn":15},{"ruleId":"282","severity":1,"message":"283","line":232,"column":23,"nodeType":"284","messageId":"280","endLine":232,"endColumn":25},{"ruleId":"282","severity":1,"message":"283","line":239,"column":23,"nodeType":"284","messageId":"280","endLine":239,"endColumn":25},{"ruleId":"282","severity":1,"message":"283","line":283,"column":24,"nodeType":"284","messageId":"280","endLine":283,"endColumn":26},{"ruleId":"282","severity":1,"message":"283","line":306,"column":24,"nodeType":"284","messageId":"280","endLine":306,"endColumn":26},{"ruleId":"282","severity":1,"message":"283","line":326,"column":24,"nodeType":"284","messageId":"280","endLine":326,"endColumn":26},{"ruleId":"366","severity":1,"message":"367","line":478,"column":122,"nodeType":"275","endLine":478,"endColumn":181},{"ruleId":"319","severity":1,"message":"320","line":478,"column":130,"nodeType":"321","messageId":"322","endLine":478,"endColumn":180},{"ruleId":"368","severity":1,"message":"369","line":483,"column":57,"nodeType":"311","messageId":"370","endLine":483,"endColumn":59},{"ruleId":"366","severity":1,"message":"367","line":490,"column":97,"nodeType":"275","endLine":490,"endColumn":156},{"ruleId":"319","severity":1,"message":"320","line":490,"column":105,"nodeType":"321","messageId":"322","endLine":490,"endColumn":155},{"ruleId":"368","severity":1,"message":"369","line":522,"column":34,"nodeType":"311","messageId":"370","endLine":522,"endColumn":36},{"ruleId":"282","severity":1,"message":"283","line":544,"column":42,"nodeType":"284","messageId":"280","endLine":544,"endColumn":44},{"ruleId":"282","severity":1,"message":"283","line":551,"column":42,"nodeType":"284","messageId":"280","endLine":551,"endColumn":44},{"ruleId":"267","severity":1,"message":"371","line":11,"column":8,"nodeType":"269","messageId":"270","endLine":11,"endColumn":12},{"ruleId":"273","severity":1,"message":"274","line":132,"column":13,"nodeType":"275","endLine":132,"endColumn":63},"no-native-reassign",["372"],"no-negated-in-lhs",["373"],"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'Sidenav' is defined but never used.","'Authapi' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'RegisterDetails' is defined but never used.","no-dupe-keys","Duplicate key 'form'.","ObjectExpression","unexpected","'openAlert' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'FormControlLabel' is defined but never used.","'Checkbox' is defined but never used.","'Avatar' is defined but never used.","'Input' is defined but never used.","'InputBase' is defined but never used.","'SearchIcon' is defined but never used.","'Button' is defined but never used.","'IconButton' is defined but never used.","'data' is assigned a value but never used.","'setSearch' is assigned a value but never used.","'setInput' is assigned a value but never used.","'handleSearch' is assigned a value but never used.","Duplicate key 'justifyContent'.","'PublicIcon' is defined but never used.","'drawerWidth' is assigned a value but never used.","'Context' is defined but never used.","'Async' is defined but never used.","'get' is defined but never used.","'bodyData' is assigned a value but never used.","'useState' is defined but never used.","'Link' is defined but never used.","'TrendingUpIcon' is defined but never used.","'RenderData' is assigned a value but never used.","Duplicate key 'padding'.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook React.useEffect has a missing dependency: 'data'. Either include it or remove the dependency array.","ArrayExpression",["374"],"'Logo' is defined but never used.","'BodyData' is defined but never used.","'Divider' is defined but never used.","'count' is assigned a value but never used.","no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression","'Redirect' is defined but never used.","'Box' is defined but never used.","'Typography' is defined but never used.","'MuiAlert' is defined but never used.","'Snackbar' is defined but never used.","'Fade' is defined but never used.","'e' is defined but never used.","'useDarkMode' is assigned a value but never used.","'Auth' is assigned a value but never used.","'html' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'logo' is defined but never used.","'file' is assigned a value but never used.","react-hooks/rules-of-hooks","React Hook \"useStyles\" is called in function \"viewPost\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter.","'Suspense' is defined but never used.","'Alert' is defined but never used.","'AlertBar' is defined but never used.","'RightSideNav' is defined but never used.","'statement' is assigned a value but never used.","'type' is assigned a value but never used.","'closeAns' is assigned a value but never used.","'setAns' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dataQns.qnsObject' and 'href'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setPostid' needs the current value of 'dataQns.qnsObject'.",["375"],"React Hook useEffect has a missing dependency: 'postid'. Either include it or remove the dependency array.",["376"],"'condition' is assigned a value but never used.","'Truncate' is defined but never used.","'postid' is assigned a value but never used.","'LocalOfferTwoToneIcon' is defined but never used.","'Chip' is defined but never used.","'QuestionAnswerIcon' is defined but never used.","'VisibilityIcon' is defined but never used.","'ViewPostComponent' is defined but never used.","React Hook useEffect has a missing dependency: 'href'. Either include it or remove the dependency array.",["377"],["372"],["373"],"'KeyboardTimePicker' is defined but never used.","'FormControl' is defined but never used.","jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'Grid' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"378","fix":"379"},{"desc":"380","fix":"381"},{"desc":"382","fix":"383"},{"desc":"384","fix":"385"},"Update the dependencies array to be: [count, data]",{"range":"386","text":"387"},"Update the dependencies array to be: [dataQns.qnsObject, href]",{"range":"388","text":"389"},"Update the dependencies array to be: [postid]",{"range":"390","text":"391"},"Update the dependencies array to be: [answers, href]",{"range":"392","text":"393"},[3293,3300],"[count, data]",[2048,2050],"[dataQns.qnsObject, href]",[2439,2441],"[postid]",[8504,8513],"[answers, href]"]